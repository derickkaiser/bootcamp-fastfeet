{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createOrReuseTransformNode = createOrReuseTransformNode;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _AnimatedNode2 = _interopRequireDefault(require(\"./AnimatedNode\"));\n\nvar _areEqual = _interopRequireDefault(require(\"fbjs/lib/areEqual\"));\n\nfunction sanitizeTransform(inputTransform) {\n  var outputTransform = [];\n  inputTransform.forEach(function (transform) {\n    for (var key in transform) {\n      var value = transform[key];\n\n      if (value instanceof _AnimatedNode2.default) {\n        outputTransform.push({\n          property: key,\n          nodeID: value.__nodeID\n        });\n      } else {\n        outputTransform.push({\n          property: key,\n          value: value\n        });\n      }\n    }\n  });\n  return outputTransform;\n}\n\nfunction extractAnimatedParentNodes(transform) {\n  var parents = [];\n  transform.forEach(function (transform) {\n    for (var key in transform) {\n      var value = transform[key];\n\n      if (value instanceof _AnimatedNode2.default) {\n        parents.push(value);\n      }\n    }\n  });\n  return parents;\n}\n\nfunction createOrReuseTransformNode(transform, oldNode) {\n  var config = sanitizeTransform(transform);\n\n  if (oldNode && (0, _areEqual.default)(config, oldNode._config)) {\n    return oldNode;\n  }\n\n  return new AnimatedTransform(transform, config);\n}\n\nvar AnimatedTransform = function (_AnimatedNode) {\n  (0, _inherits2.default)(AnimatedTransform, _AnimatedNode);\n\n  function AnimatedTransform(transform, config) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, AnimatedTransform);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AnimatedTransform).call(this, {\n      type: 'transform',\n      transform: config\n    }, extractAnimatedParentNodes(transform)));\n    _this._config = config;\n    _this._transform = transform;\n    return _this;\n  }\n\n  (0, _createClass2.default)(AnimatedTransform, [{\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      return this._transform.map(function (transform) {\n        var result = {};\n\n        for (var key in transform) {\n          var value = transform[key];\n\n          if (value instanceof _AnimatedNode2.default) {\n            result[key] = value.__getValue();\n          }\n        }\n\n        return result;\n      });\n    }\n  }]);\n  return AnimatedTransform;\n}(_AnimatedNode2.default);","map":{"version":3,"sources":["/Users/derickkaiser/Documents/Bootcamp2019/bootcamp-fastfeet/mobile/node_modules/react-native-reanimated/src/core/AnimatedTransform.js"],"names":["sanitizeTransform","inputTransform","outputTransform","forEach","transform","key","value","AnimatedNode","push","property","nodeID","__nodeID","extractAnimatedParentNodes","parents","createOrReuseTransformNode","oldNode","config","_config","AnimatedTransform","type","_transform","map","result","__getValue"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AAEA;;AAEA,SAASA,iBAAT,CAA2BC,cAA3B,EAA2C;AACzC,MAAMC,eAAe,GAAG,EAAxB;AACAD,EAAAA,cAAc,CAACE,OAAf,CAAuB,UAAAC,SAAS,EAAI;AAClC,SAAK,IAAMC,GAAX,IAAkBD,SAAlB,EAA6B;AAC3B,UAAME,KAAK,GAAGF,SAAS,CAACC,GAAD,CAAvB;;AACA,UAAIC,KAAK,YAAYC,sBAArB,EAAmC;AACjCL,QAAAA,eAAe,CAACM,IAAhB,CAAqB;AACnBC,UAAAA,QAAQ,EAAEJ,GADS;AAEnBK,UAAAA,MAAM,EAAEJ,KAAK,CAACK;AAFK,SAArB;AAID,OALD,MAKO;AACLT,QAAAA,eAAe,CAACM,IAAhB,CAAqB;AACnBC,UAAAA,QAAQ,EAAEJ,GADS;AAEnBC,UAAAA,KAAK,EAALA;AAFmB,SAArB;AAID;AACF;AACF,GAfD;AAgBA,SAAOJ,eAAP;AACD;;AAED,SAASU,0BAAT,CAAoCR,SAApC,EAA+C;AAC7C,MAAMS,OAAO,GAAG,EAAhB;AACAT,EAAAA,SAAS,CAACD,OAAV,CAAkB,UAAAC,SAAS,EAAI;AAC7B,SAAK,IAAMC,GAAX,IAAkBD,SAAlB,EAA6B;AAC3B,UAAME,KAAK,GAAGF,SAAS,CAACC,GAAD,CAAvB;;AACA,UAAIC,KAAK,YAAYC,sBAArB,EAAmC;AACjCM,QAAAA,OAAO,CAACL,IAAR,CAAaF,KAAb;AACD;AACF;AACF,GAPD;AAQA,SAAOO,OAAP;AACD;;AAEM,SAASC,0BAAT,CAAoCV,SAApC,EAA+CW,OAA/C,EAAwD;AAC7D,MAAMC,MAAM,GAAGhB,iBAAiB,CAACI,SAAD,CAAhC;;AACA,MAAIW,OAAO,IAAI,uBAAUC,MAAV,EAAkBD,OAAO,CAACE,OAA1B,CAAf,EAAmD;AACjD,WAAOF,OAAP;AACD;;AACD,SAAO,IAAIG,iBAAJ,CAAsBd,SAAtB,EAAiCY,MAAjC,CAAP;AACD;;IAEKE,iB;;;AACJ,6BAAYd,SAAZ,EAAuBY,MAAvB,EAA+B;AAAA;;AAAA;AAC7B,uHACE;AAAEG,MAAAA,IAAI,EAAE,WAAR;AAAqBf,MAAAA,SAAS,EAAEY;AAAhC,KADF,EAEEJ,0BAA0B,CAACR,SAAD,CAF5B;AAIA,UAAKa,OAAL,GAAeD,MAAf;AACA,UAAKI,UAAL,GAAkBhB,SAAlB;AAN6B;AAO9B;;;;mCAEc;AACb,aAAO,KAAKgB,UAAL,CAAgBC,GAAhB,CAAoB,UAAAjB,SAAS,EAAI;AACtC,YAAMkB,MAAM,GAAG,EAAf;;AACA,aAAK,IAAMjB,GAAX,IAAkBD,SAAlB,EAA6B;AAC3B,cAAME,KAAK,GAAGF,SAAS,CAACC,GAAD,CAAvB;;AACA,cAAIC,KAAK,YAAYC,sBAArB,EAAmC;AACjCe,YAAAA,MAAM,CAACjB,GAAD,CAAN,GAAcC,KAAK,CAACiB,UAAN,EAAd;AACD;AACF;;AACD,eAAOD,MAAP;AACD,OATM,CAAP;AAUD;;;EArB6Bf,sB","sourcesContent":["import AnimatedNode from './AnimatedNode';\n\nimport deepEqual from 'fbjs/lib/areEqual';\n\nfunction sanitizeTransform(inputTransform) {\n  const outputTransform = [];\n  inputTransform.forEach(transform => {\n    for (const key in transform) {\n      const value = transform[key];\n      if (value instanceof AnimatedNode) {\n        outputTransform.push({\n          property: key,\n          nodeID: value.__nodeID,\n        });\n      } else {\n        outputTransform.push({\n          property: key,\n          value,\n        });\n      }\n    }\n  });\n  return outputTransform;\n}\n\nfunction extractAnimatedParentNodes(transform) {\n  const parents = [];\n  transform.forEach(transform => {\n    for (const key in transform) {\n      const value = transform[key];\n      if (value instanceof AnimatedNode) {\n        parents.push(value);\n      }\n    }\n  });\n  return parents;\n}\n\nexport function createOrReuseTransformNode(transform, oldNode) {\n  const config = sanitizeTransform(transform);\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n  return new AnimatedTransform(transform, config);\n}\n\nclass AnimatedTransform extends AnimatedNode {\n  constructor(transform, config) {\n    super(\n      { type: 'transform', transform: config },\n      extractAnimatedParentNodes(transform)\n    );\n    this._config = config;\n    this._transform = transform;\n  }\n\n  __onEvaluate() {\n    return this._transform.map(transform => {\n      const result = {};\n      for (const key in transform) {\n        const value = transform[key];\n        if (value instanceof AnimatedNode) {\n          result[key] = value.__getValue();\n        }\n      }\n      return result;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}