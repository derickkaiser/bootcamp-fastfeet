{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createPointerEventsContainer;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/react-navigation-stack/src/views/StackView/createPointerEventsContainer.tsx\";\nvar MIN_POSITION_OFFSET = 0.01;\n\nfunction createPointerEventsContainer(Component) {\n  var Container = function (_React$Component) {\n    (0, _inherits2.default)(Container, _React$Component);\n\n    function Container() {\n      var _getPrototypeOf2;\n\n      var _this;\n\n      (0, _classCallCheck2.default)(this, Container);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Container)).call.apply(_getPrototypeOf2, [this].concat(args)));\n      _this.pointerEvents = _this.computePointerEvents();\n      _this.component = null;\n\n      _this.handleComponentRef = function (component) {\n        _this.component = component;\n\n        if (component && typeof component.setNativeProps !== 'function') {\n          throw new Error('Component must implement method `setNativeProps`');\n        }\n      };\n\n      _this.handlePositionChange = function () {\n        if (_this.component) {\n          var pointerEvents = _this.computePointerEvents();\n\n          if (_this.pointerEvents !== pointerEvents) {\n            _this.pointerEvents = pointerEvents;\n\n            _this.component.setNativeProps({\n              pointerEvents: pointerEvents\n            });\n          }\n        }\n      };\n\n      return _this;\n    }\n\n    (0, _createClass2.default)(Container, [{\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this.positionListener && this.positionListener.remove();\n      }\n    }, {\n      key: \"bindPosition\",\n      value: function bindPosition() {\n        this.positionListener && this.positionListener.remove();\n        this.positionListener = new AnimatedValueSubscription(this.props.realPosition, this.handlePositionChange);\n      }\n    }, {\n      key: \"computePointerEvents\",\n      value: function computePointerEvents() {\n        var _this$props = this.props,\n            navigation = _this$props.navigation,\n            realPosition = _this$props.realPosition,\n            scene = _this$props.scene;\n\n        if (scene.isStale || navigation.state.index !== scene.index) {\n          return scene.index > navigation.state.index ? 'box-only' : 'none';\n        }\n\n        var offset = realPosition.__getAnimatedValue() - navigation.state.index;\n\n        if (Math.abs(offset) > MIN_POSITION_OFFSET) {\n          return 'box-only';\n        }\n\n        return 'auto';\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        this.bindPosition();\n        this.pointerEvents = this.computePointerEvents();\n        return React.createElement(Component, (0, _extends2.default)({}, this.props, {\n          pointerEvents: this.pointerEvents,\n          onComponentRef: this.handleComponentRef,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          }\n        }));\n      }\n    }]);\n    return Container;\n  }(React.Component);\n\n  return Container;\n}\n\nvar AnimatedValueSubscription = function () {\n  function AnimatedValueSubscription(value, callback) {\n    (0, _classCallCheck2.default)(this, AnimatedValueSubscription);\n    this.value = value;\n    this.token = value.addListener(callback);\n  }\n\n  (0, _createClass2.default)(AnimatedValueSubscription, [{\n    key: \"remove\",\n    value: function remove() {\n      this.value.removeListener(this.token);\n    }\n  }]);\n  return AnimatedValueSubscription;\n}();","map":{"version":3,"sources":["createPointerEventsContainer.tsx"],"names":["MIN_POSITION_OFFSET","Container","React","component","pointerEvents","navigation","realPosition","scene","offset","Math","AnimatedValueSubscription","value"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View } from 'react-native';\nimport { NavigationStackProp, Scene } from '../../types';\n\nconst MIN_POSITION_OFFSET = 0.01;\n\nexport type PointerEvents = 'box-only' | 'none' | 'auto';\n\nexport type InputProps = {\n  scene: Scene;\n  navigation: NavigationStackProp;\n  realPosition: Animated.Value;\n};\n\nexport type InjectedProps = {\n  pointerEvents: PointerEvents;\n  onComponentRef: (ref: View | null) => void;\n};\n\n/**\n * Create a higher-order component that automatically computes the\n * `pointerEvents` property for a component whenever navigation position\n * changes.\n */\nexport default function createPointerEventsContainer<\n  Props extends InjectedProps & InputProps\n>(\n  Component: React.ComponentType<Props>\n): React.ComponentType<Pick<Props, Exclude<keyof Props, keyof InjectedProps>>> {\n  class Container extends React.Component<Props> {\n    private pointerEvents = this.computePointerEvents();\n    private component: View | null = null;\n    private positionListener: AnimatedValueSubscription | undefined;\n\n    componentWillUnmount() {\n      this.positionListener && this.positionListener.remove();\n    }\n\n    private handleComponentRef = (component: View | null) => {\n      this.component = component;\n\n      if (component && typeof component.setNativeProps !== 'function') {\n        throw new Error('Component must implement method `setNativeProps`');\n      }\n    };\n\n    private bindPosition() {\n      this.positionListener && this.positionListener.remove();\n      this.positionListener = new AnimatedValueSubscription(\n        this.props.realPosition,\n        this.handlePositionChange\n      );\n    }\n\n    private handlePositionChange = (/* { value } */) => {\n      // This should log each frame when releasing the gesture or when pressing\n      // the back button! If not, something has gone wrong with the animated\n      // value subscription\n      // console.log(value);\n\n      if (this.component) {\n        const pointerEvents = this.computePointerEvents();\n        if (this.pointerEvents !== pointerEvents) {\n          this.pointerEvents = pointerEvents;\n          this.component.setNativeProps({ pointerEvents });\n        }\n      }\n    };\n\n    private computePointerEvents() {\n      const { navigation, realPosition, scene } = this.props;\n\n      if (scene.isStale || navigation.state.index !== scene.index) {\n        // The scene isn't focused.\n        return scene.index > navigation.state.index ? 'box-only' : 'none';\n      }\n\n      // @ts-ignore\n      const offset = realPosition.__getAnimatedValue() - navigation.state.index;\n      if (Math.abs(offset) > MIN_POSITION_OFFSET) {\n        // The positon is still away from scene's index.\n        // Scene's children should not receive touches until the position\n        // is close enough to scene's index.\n        return 'box-only';\n      }\n\n      return 'auto';\n    }\n\n    render() {\n      this.bindPosition();\n      this.pointerEvents = this.computePointerEvents();\n\n      return (\n        <Component\n          {...this.props}\n          pointerEvents={this.pointerEvents}\n          onComponentRef={this.handleComponentRef}\n        />\n      );\n    }\n  }\n\n  return Container as any;\n}\n\nclass AnimatedValueSubscription {\n  private value: Animated.Value;\n  private token: string;\n\n  constructor(value: Animated.Value, callback: Animated.ValueListenerCallback) {\n    this.value = value;\n    this.token = value.addListener(callback);\n  }\n\n  remove() {\n    this.value.removeListener(this.token);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}