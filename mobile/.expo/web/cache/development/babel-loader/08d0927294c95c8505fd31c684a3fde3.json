{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = backwardsCompatibleAnimWrapper;\n\nvar _base = require(\"../base\");\n\nvar _AnimatedClock = _interopRequireDefault(require(\"../core/AnimatedClock\"));\n\nvar _evaluateOnce = require(\"../derived/evaluateOnce\");\n\nfunction createOldAnimationObject(node, AnimationClass, value, config) {\n  var newClock = new _AnimatedClock.default();\n  var currentState = AnimationClass.getDefaultState();\n  var alwaysNode;\n  var isStarted = false;\n  var isDone = false;\n  var wasStopped = false;\n  var animationCallback;\n  var animation = {\n    start: function start(currentAnimationCallback) {\n      animationCallback = currentAnimationCallback;\n\n      if (isStarted) {\n        animationCallback && animationCallback({\n          finished: false\n        });\n        return;\n      }\n\n      if (isDone) {\n        console.warn('Animation has been finished before');\n        return;\n      }\n\n      if (!value.isNativelyInitialized()) {\n        return;\n      }\n\n      isStarted = true;\n      (0, _evaluateOnce.evaluateOnce)((0, _base.set)(currentState.position, value), currentState.position, function () {\n        alwaysNode = (0, _base.always)((0, _base.set)(value, (0, _base.block)([(0, _base.cond)((0, _base.clockRunning)(newClock), 0, (0, _base.startClock)(newClock)), node(newClock, currentState, config), (0, _base.cond)(currentState.finished, [(0, _base.call)([], function () {\n          isStarted = false;\n\n          if (!wasStopped) {\n            isDone = true;\n          }\n\n          value.__detachAnimation(animation);\n\n          isDone = true;\n\n          if (!wasStopped) {\n            wasStopped = false;\n          }\n        }), (0, _base.stopClock)(newClock)]), currentState.position])));\n\n        value.__attachAnimation(animation);\n\n        alwaysNode.__addChild(value);\n      });\n    },\n    __detach: function __detach() {\n      animationCallback && animationCallback({\n        finished: isDone\n      });\n      animationCallback = null;\n\n      alwaysNode.__removeChild(value);\n    },\n    stop: function stop() {\n      if (isDone) {\n        console.warn('Calling stop has no effect as the animation has already completed');\n        return;\n      }\n\n      if (!isStarted) {\n        console.warn(\"Calling stop has no effect as the animation hasn't been started\");\n        return;\n      }\n\n      wasStopped = true;\n      (0, _evaluateOnce.evaluateOnce)((0, _base.set)(currentState.finished, 1), currentState.finished);\n    },\n    __stopImmediately_testOnly: function __stopImmediately_testOnly(result) {\n      animation.stop();\n      isDone = result;\n\n      value.__detachAnimation(animation);\n    }\n  };\n  return animation;\n}\n\nfunction backwardsCompatibleAnimWrapper(node, AnimationClass) {\n  return function (clock, state, config) {\n    if (config !== undefined) {\n      return node(clock, state, config);\n    }\n\n    return createOldAnimationObject(node, AnimationClass, clock, state);\n  };\n}","map":{"version":3,"sources":["/Users/derickkaiser/Documents/Bootcamp2019/bootcamp-fastfeet/mobile/node_modules/react-native-reanimated/src/animations/backwardCompatibleAnimWrapper.js"],"names":["createOldAnimationObject","node","AnimationClass","value","config","newClock","Clock","currentState","getDefaultState","alwaysNode","isStarted","isDone","wasStopped","animationCallback","animation","start","currentAnimationCallback","finished","console","warn","isNativelyInitialized","position","__detachAnimation","__attachAnimation","__addChild","__detach","__removeChild","stop","__stopImmediately_testOnly","result","backwardsCompatibleAnimWrapper","clock","state","undefined"],"mappings":"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","sourcesContent":["import {\n  always,\n  block,\n  call,\n  clockRunning,\n  cond,\n  set,\n  startClock,\n  stopClock,\n} from '../base';\nimport { default as Clock } from '../core/AnimatedClock';\nimport { evaluateOnce } from '../derived/evaluateOnce';\n\nfunction createOldAnimationObject(node, AnimationClass, value, config) {\n  const newClock = new Clock();\n  const currentState = AnimationClass.getDefaultState();\n  let alwaysNode;\n  let isStarted = false;\n  let isDone = false;\n  let wasStopped = false;\n  let animationCallback;\n  const animation = {\n    start: currentAnimationCallback => {\n      animationCallback = currentAnimationCallback;\n      if (isStarted) {\n        animationCallback && animationCallback({ finished: false });\n        return;\n      }\n      if (isDone) {\n        console.warn('Animation has been finished before');\n        // inconsistent with React Native\n        return;\n      }\n\n      if (!value.isNativelyInitialized()) {\n        return;\n      }\n\n      isStarted = true;\n      evaluateOnce(\n        set(currentState.position, value),\n        currentState.position,\n        () => {\n          alwaysNode = always(\n            set(\n              value,\n              block([\n                cond(clockRunning(newClock), 0, startClock(newClock)),\n                node(newClock, currentState, config),\n                cond(currentState.finished, [\n                  call([], () => {\n                    isStarted = false;\n                    if (!wasStopped) {\n                      isDone = true;\n                    }\n                    value.__detachAnimation(animation);\n                    isDone = true;\n                    if (!wasStopped) {\n                      wasStopped = false;\n                    }\n                  }),\n                  stopClock(newClock),\n                ]),\n                currentState.position,\n              ])\n            )\n          );\n          value.__attachAnimation(animation);\n          alwaysNode.__addChild(value);\n        }\n      );\n    },\n    __detach: () => {\n      animationCallback && animationCallback({ finished: isDone });\n      animationCallback = null;\n      alwaysNode.__removeChild(value);\n    },\n    stop: () => {\n      if (isDone) {\n        console.warn(\n          'Calling stop has no effect as the animation has already completed'\n        );\n        return;\n      }\n      if (!isStarted) {\n        console.warn(\n          \"Calling stop has no effect as the animation hasn't been started\"\n        );\n        return;\n      }\n      wasStopped = true;\n      evaluateOnce(set(currentState.finished, 1), currentState.finished);\n    },\n    __stopImmediately_testOnly: result => {\n      animation.stop();\n      isDone = result;\n      value.__detachAnimation(animation);\n    },\n  };\n  return animation;\n}\n\n/**\n * Depending on the arguments list we either return animation node or return an\n * animation object that is compatible with the original Animated API\n */\nexport default function backwardsCompatibleAnimWrapper(node, AnimationClass) {\n  return (clock, state, config) => {\n    if (config !== undefined) {\n      return node(clock, state, config);\n    }\n    return createOldAnimationObject(node, AnimationClass, clock, state);\n  };\n}\n"]},"metadata":{},"sourceType":"script"}