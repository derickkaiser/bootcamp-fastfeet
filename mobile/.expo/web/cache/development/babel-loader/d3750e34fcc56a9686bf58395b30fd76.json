{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _DiscreteGestureHandler = _interopRequireDefault(require(\"./DiscreteGestureHandler\"));\n\nvar NodeManager = _interopRequireWildcard(require(\"./NodeManager\"));\n\nvar _PressGestureHandler2 = _interopRequireDefault(require(\"./PressGestureHandler\"));\n\nvar _utils = require(\"./utils\");\n\nvar NativeViewGestureHandler = function (_PressGestureHandler) {\n  (0, _inherits2.default)(NativeViewGestureHandler, _PressGestureHandler);\n\n  function NativeViewGestureHandler() {\n    (0, _classCallCheck2.default)(this, NativeViewGestureHandler);\n    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(NativeViewGestureHandler).apply(this, arguments));\n  }\n\n  (0, _createClass2.default)(NativeViewGestureHandler, [{\n    key: \"onRawEvent\",\n    value: function onRawEvent(ev) {\n      var _this = this;\n\n      (0, _get2.default)((0, _getPrototypeOf2.default)(NativeViewGestureHandler.prototype), \"onRawEvent\", this).call(this, ev);\n\n      if (!ev.isFinal) {\n        if ((0, _utils.TEST_MIN_IF_NOT_NAN)((0, _utils.VEC_LEN_SQ)({\n          x: ev.deltaX,\n          y: ev.deltaY\n        }), 10)) {\n          if (this.config.disallowInterruption) {\n            var gestures = Object.values(NodeManager.getNodes()).filter(function (gesture) {\n              var handlerTag = gesture.handlerTag,\n                  view = gesture.view,\n                  isGestureRunning = gesture.isGestureRunning;\n              return handlerTag !== _this.handlerTag && isGestureRunning && gesture instanceof _DiscreteGestureHandler.default && view && _this.view.contains(view);\n            });\n\n            for (var _iterator = gestures, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n              var _ref;\n\n              if (_isArray) {\n                if (_i >= _iterator.length) break;\n                _ref = _iterator[_i++];\n              } else {\n                _i = _iterator.next();\n                if (_i.done) break;\n                _ref = _i.value;\n              }\n\n              var _gesture = _ref;\n\n              _gesture.forceInvalidate(ev);\n            }\n          }\n        }\n      }\n    }\n  }]);\n  return NativeViewGestureHandler;\n}(_PressGestureHandler2.default);\n\nvar _default = NativeViewGestureHandler;\nexports.default = _default;","map":{"version":3,"sources":["/Users/derickkaiser/Documents/Bootcamp2019/bootcamp-fastfeet/mobile/node_modules/react-native-gesture-handler/web/NativeViewGestureHandler.js"],"names":["NativeViewGestureHandler","ev","isFinal","x","deltaX","y","deltaY","config","disallowInterruption","gestures","Object","values","NodeManager","getNodes","filter","gesture","handlerTag","view","isGestureRunning","DiscreteGestureHandler","contains","forceInvalidate","PressGestureHandler"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;IAEMA,wB;;;;;;;;;;+BACOC,E,EAAI;AAAA;;AACb,2HAAiBA,EAAjB;;AACA,UAAI,CAACA,EAAE,CAACC,OAAR,EAAiB;AAEf,YAAI,gCAAoB,uBAAW;AAAEC,UAAAA,CAAC,EAAEF,EAAE,CAACG,MAAR;AAAgBC,UAAAA,CAAC,EAAEJ,EAAE,CAACK;AAAtB,SAAX,CAApB,EAAgE,EAAhE,CAAJ,EAAyE;AACvE,cAAI,KAAKC,MAAL,CAAYC,oBAAhB,EAAsC;AACpC,gBAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAcC,WAAW,CAACC,QAAZ,EAAd,EAAsCC,MAAtC,CAA6C,UAAAC,OAAO,EAAI;AAAA,kBAC/DC,UAD+D,GACxBD,OADwB,CAC/DC,UAD+D;AAAA,kBACnDC,IADmD,GACxBF,OADwB,CACnDE,IADmD;AAAA,kBAC7CC,gBAD6C,GACxBH,OADwB,CAC7CG,gBAD6C;AAEvE,qBAEEF,UAAU,KAAK,KAAI,CAACA,UAApB,IAEAE,gBAFA,IAIAH,OAAO,YAAYI,+BAJnB,IAMAF,IANA,IAOA,KAAI,CAACA,IAAL,CAAUG,QAAV,CAAmBH,IAAnB,CATF;AAWD,aAbgB,CAAjB;;AAeA,iCAAsBR,QAAtB,gKAAgC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,kBAArBM,QAAqB;;AAE9BA,cAAAA,QAAO,CAACM,eAAR,CAAwBpB,EAAxB;AACD;AACF;AACF;AACF;AACF;;;EA7BoCqB,6B;;eAgCxBtB,wB","sourcesContent":["import DiscreteGestureHandler from './DiscreteGestureHandler';\nimport * as NodeManager from './NodeManager';\nimport PressGestureHandler from './PressGestureHandler';\nimport { TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from './utils';\n\nclass NativeViewGestureHandler extends PressGestureHandler {\n  onRawEvent(ev) {\n    super.onRawEvent(ev);\n    if (!ev.isFinal) {\n      // if (this.ref instanceof ScrollView) {\n      if (TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({ x: ev.deltaX, y: ev.deltaY }), 10)) {\n        if (this.config.disallowInterruption) {\n          const gestures = Object.values(NodeManager.getNodes()).filter(gesture => {\n            const { handlerTag, view, isGestureRunning } = gesture;\n            return (\n              // Check if this gesture isn't self\n              handlerTag !== this.handlerTag &&\n              // Ensure the gesture needs to be cancelled\n              isGestureRunning &&\n              // ScrollView can cancel discrete gestures like taps and presses\n              gesture instanceof DiscreteGestureHandler &&\n              // Ensure a view exists and is a child of the current view\n              view &&\n              this.view.contains(view)\n            );\n          });\n          // Cancel all of the gestures that passed the filter\n          for (const gesture of gestures) {\n            // TODO: Bacon: Send some cached event.\n            gesture.forceInvalidate(ev);\n          }\n        }\n      }\n    }\n  }\n}\n\nexport default NativeViewGestureHandler;\n"]},"metadata":{},"sourceType":"script"}