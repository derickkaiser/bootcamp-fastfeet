{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeScreens = require(\"react-native-screens\");\n\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/react-navigation-tabs/src/views/ResourceSavingScene.tsx\";\nvar FAR_FAR_AWAY = 3000;\n\nvar ResourceSavingScene = function (_React$Component) {\n  (0, _inherits2.default)(ResourceSavingScene, _React$Component);\n\n  function ResourceSavingScene() {\n    (0, _classCallCheck2.default)(this, ResourceSavingScene);\n    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ResourceSavingScene).apply(this, arguments));\n  }\n\n  (0, _createClass2.default)(ResourceSavingScene, [{\n    key: \"render\",\n    value: function render() {\n      if (_reactNativeScreens.screensEnabled && (0, _reactNativeScreens.screensEnabled)()) {\n        var _this$props = this.props,\n            _isVisible = _this$props.isVisible,\n            _rest = (0, _objectWithoutProperties2.default)(_this$props, [\"isVisible\"]);\n\n        return React.createElement(_reactNativeScreens.Screen, (0, _extends2.default)({\n          active: _isVisible ? 1 : 0\n        }, _rest, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          }\n        }));\n      }\n\n      var _this$props2 = this.props,\n          isVisible = _this$props2.isVisible,\n          children = _this$props2.children,\n          style = _this$props2.style,\n          rest = (0, _objectWithoutProperties2.default)(_this$props2, [\"isVisible\", \"children\", \"style\"]);\n      return React.createElement(_reactNative.View, (0, _extends2.default)({\n        style: [styles.container, style, {\n          opacity: isVisible ? 1 : 0\n        }],\n        collapsable: false,\n        removeClippedSubviews: _reactNative.Platform.OS === 'ios' ? !isVisible : true,\n        pointerEvents: isVisible ? 'auto' : 'none'\n      }, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        }\n      }), React.createElement(_reactNative.View, {\n        style: isVisible ? styles.attached : styles.detached,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        }\n      }, children));\n    }\n  }]);\n  return ResourceSavingScene;\n}(React.Component);\n\nexports.default = ResourceSavingScene;\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  attached: {\n    flex: 1\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY\n  }\n});","map":{"version":3,"sources":["ResourceSavingScene.tsx"],"names":["FAR_FAR_AWAY","ResourceSavingScene","React","screensEnabled","isVisible","rest","children","style","styles","opacity","Platform","StyleSheet","container","flex","overflow","attached","detached","top"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAGA;;;AAQA,IAAMA,YAAY,GAAlB,IAAA;;AAEqBC,IAAAA,mB;;;;;;;;;;6BACV;AACP,UAAIE,sCAAJ,yCAAA,EAAwC;AAAA,YAAA,WAAA,GACP,KADO,KAAA;AAAA,YAC9BC,UAD8B,GAAA,WAAA,CAAA,SAAA;AAAA,YAChBC,KADgB,GAAA,uCAAA,WAAA,EAAA,CAAA,WAAA,CAAA,CAAA;;AAGtC,eAAO,KAAA,CAAA,aAAA,CAAA,0BAAA,EAAA,uBAAA;AAAQ,UAAA,MAAM,EAAED,UAAS,GAAA,CAAA,GAAzB;AAAA,SAAA,EAAA,KAAA,EAAA;AAAA,UAAA,QAAA,EAAA;AAAA,YAAA,QAAA,EAAA,YAAA;AAAA,YAAA,UAAA,EAAP;AAAO;AAAA,SAAA,CAAA,CAAP;AAJK;;AAAA,UAAA,YAAA,GAOyC,KAPzC,KAAA;AAAA,UAOCA,SAPD,GAAA,YAAA,CAAA,SAAA;AAAA,UAOYE,QAPZ,GAAA,YAAA,CAAA,QAAA;AAAA,UAOsBC,KAPtB,GAAA,YAAA,CAAA,KAAA;AAAA,UAOgCF,IAPhC,GAAA,uCAAA,YAAA,EAAA,CAAA,WAAA,EAAA,UAAA,EAAA,OAAA,CAAA,CAAA;AASP,aACE,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA,uBAAA;AACE,QAAA,KAAK,EAAE,CAACG,MAAM,CAAP,SAAA,EAAA,KAAA,EAA0B;AAAEC,UAAAA,OAAO,EAAEL,SAAS,GAAA,CAAA,GADvD;AACmC,SAA1B,CADT;AAEE,QAAA,WAAW,EAFb,KAAA;AAGE,QAAA,qBAAqB,EAGnBM,sBAAAA,EAAAA,KAAAA,KAAAA,GAAwB,CAAxBA,SAAAA,GANJ,IAAA;AAQE,QAAA,aAAa,EAAEN,SAAS,GAAA,MAAA,GAR1B;AAAA,OAAA,EAAA,IAAA,EAAA;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EAAA;AAAA;AAAA,OAAA,CAAA,EAWE,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA;AAAM,QAAA,KAAK,EAAEA,SAAS,GAAGI,MAAM,CAAT,QAAA,GAAqBA,MAAM,CAAjD,QAAA;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EAAA;AAAA;AAAA,OAAA,EAZJ,QAYI,CAXF,CADF;;;;EAV6CN,KAAK,CAAjCD,S,CAAAA;;;;AA8BrB,IAAMO,MAAM,GAAGG,wBAAAA,MAAAA,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EADK,CAAA;AAETC,IAAAA,QAAQ,EAHqB;AACpB,GADoB;AAK/BC,EAAAA,QAAQ,EAAE;AACRF,IAAAA,IAAI,EANyB;AAKrB,GALqB;AAQ/BG,EAAAA,QAAQ,EAAE;AACRH,IAAAA,IAAI,EADI,CAAA;AAERI,IAAAA,GAAG,EAVP;AAQY;AARqB,CAAlBN,CAAf","sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\n\n// eslint-disable-next-line import/no-unresolved\nimport { Screen, screensEnabled } from 'react-native-screens';\n\ntype Props = {\n  isVisible: boolean;\n  children: React.ReactNode;\n  style?: any;\n};\n\nconst FAR_FAR_AWAY = 3000; // this should be big enough to move the whole view out of its container\n\nexport default class ResourceSavingScene extends React.Component<Props> {\n  render() {\n    if (screensEnabled && screensEnabled()) {\n      const { isVisible, ...rest } = this.props;\n      // @ts-ignore\n      return <Screen active={isVisible ? 1 : 0} {...rest} />;\n    }\n\n    const { isVisible, children, style, ...rest } = this.props;\n\n    return (\n      <View\n        style={[styles.container, style, { opacity: isVisible ? 1 : 0 }]}\n        collapsable={false}\n        removeClippedSubviews={\n          // On iOS, set removeClippedSubviews to true only when not focused\n          // This is an workaround for a bug where the clipped view never re-appears\n          Platform.OS === 'ios' ? !isVisible : true\n        }\n        pointerEvents={isVisible ? 'auto' : 'none'}\n        {...rest}\n      >\n        <View style={isVisible ? styles.attached : styles.detached}>\n          {children}\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  attached: {\n    flex: 1,\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}