{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeReanimated = _interopRequireWildcard(require(\"react-native-reanimated\"));\n\nvar _memoize = _interopRequireDefault(require(\"./memoize\"));\n\nvar _jsxFileName = \"/Users/osdnk/work/react-native-tab-view/src/TabBarIndicator.tsx\";\nvar interpolate = _reactNativeReanimated.default.interpolate,\n    multiply = _reactNativeReanimated.default.multiply,\n    Extrapolate = _reactNativeReanimated.default.Extrapolate;\n\nvar TabBarIndicator = function (_React$Component) {\n  (0, _inherits2.default)(TabBarIndicator, _React$Component);\n\n  function TabBarIndicator() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    (0, _classCallCheck2.default)(this, TabBarIndicator);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(TabBarIndicator)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.fadeInIndicator = function () {\n      var _this$props = _this.props,\n          navigationState = _this$props.navigationState,\n          layout = _this$props.layout,\n          width = _this$props.width,\n          getTabWidth = _this$props.getTabWidth;\n\n      if (!_this.isIndicatorShown && width === 'auto' && layout.width && navigationState.routes.every(function (_, i) {\n        return getTabWidth(i);\n      })) {\n        _this.isIndicatorShown = true;\n\n        _reactNativeReanimated.default.timing(_this.opacity, {\n          duration: 150,\n          toValue: 1,\n          easing: _reactNativeReanimated.Easing.in(_reactNativeReanimated.Easing.linear)\n        }).start();\n      }\n    };\n\n    _this.isIndicatorShown = false;\n    _this.opacity = new _reactNativeReanimated.default.Value(_this.props.width === 'auto' ? 0 : 1);\n    _this.getTranslateX = (0, _memoize.default)(function (position, routes, getTabWidth) {\n      var inputRange = routes.map(function (_, i) {\n        return i;\n      });\n      var outputRange = routes.reduce(function (acc, _, i) {\n        if (i === 0) return [0];\n        return [].concat((0, _toConsumableArray2.default)(acc), [acc[i - 1] + getTabWidth(i - 1)]);\n      }, []);\n      var translateX = interpolate(position, {\n        inputRange: inputRange,\n        outputRange: outputRange,\n        extrapolate: Extrapolate.CLAMP\n      });\n      return multiply(translateX, _reactNative.I18nManager.isRTL ? -1 : 1);\n    });\n    _this.getWidth = (0, _memoize.default)(function (position, routes, getTabWidth) {\n      var inputRange = routes.map(function (_, i) {\n        return i;\n      });\n      var outputRange = inputRange.map(getTabWidth);\n      return interpolate(position, {\n        inputRange: inputRange,\n        outputRange: outputRange,\n        extrapolate: Extrapolate.CLAMP\n      });\n    });\n    return _this;\n  }\n\n  (0, _createClass2.default)(TabBarIndicator, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fadeInIndicator();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.fadeInIndicator();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          position = _this$props2.position,\n          navigationState = _this$props2.navigationState,\n          getTabWidth = _this$props2.getTabWidth,\n          width = _this$props2.width,\n          style = _this$props2.style,\n          layout = _this$props2.layout;\n      var routes = navigationState.routes;\n      var translateX = routes.length > 1 ? this.getTranslateX(position, routes, getTabWidth) : 0;\n      var indicatorWidth = width === 'auto' ? routes.length > 1 ? this.getWidth(position, routes, getTabWidth) : getTabWidth(0) : width;\n      return React.createElement(_reactNativeReanimated.default.View, {\n        style: [styles.indicator, {\n          width: indicatorWidth\n        }, layout.width ? {\n          transform: [{\n            translateX: translateX\n          }]\n        } : {\n          left: 100 / routes.length * navigationState.index + \"%\"\n        }, width === 'auto' ? {\n          opacity: this.opacity\n        } : null, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        }\n      });\n    }\n  }]);\n  return TabBarIndicator;\n}(React.Component);\n\nexports.default = TabBarIndicator;\n\nvar styles = _reactNative.StyleSheet.create({\n  indicator: {\n    backgroundColor: '#ffeb3b',\n    position: 'absolute',\n    left: 0,\n    bottom: 0,\n    right: 0,\n    height: 2\n  }\n});","map":{"version":3,"sources":["TabBarIndicator.tsx"],"names":["interpolate","multiply","Extrapolate","Animated","TabBarIndicator","React","fadeInIndicator","navigationState","layout","width","getTabWidth","duration","toValue","easing","Easing","isIndicatorShown","opacity","getTranslateX","memoize","inputRange","routes","outputRange","i","acc","translateX","extrapolate","I18nManager","getWidth","position","style","indicatorWidth","styles","transform","left","StyleSheet","indicator","backgroundColor","bottom","right","height"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, I18nManager, StyleProp, ViewStyle } from 'react-native';\nimport Animated, { Easing } from 'react-native-reanimated';\n\nimport memoize from './memoize';\nimport { Route, SceneRendererProps, NavigationState } from './types';\n\nexport type GetTabWidth = (index: number) => number;\n\nexport type Props<T extends Route> = SceneRendererProps & {\n  navigationState: NavigationState<T>;\n  width: string;\n  style?: StyleProp<ViewStyle>;\n  getTabWidth: GetTabWidth;\n};\n\nconst { interpolate, multiply, Extrapolate } = Animated;\n\nexport default class TabBarIndicator<T extends Route> extends React.Component<\n  Props<T>\n> {\n  componentDidMount() {\n    this.fadeInIndicator();\n  }\n\n  componentDidUpdate() {\n    this.fadeInIndicator();\n  }\n\n  private fadeInIndicator = () => {\n    const { navigationState, layout, width, getTabWidth } = this.props;\n\n    if (\n      !this.isIndicatorShown &&\n      width === 'auto' &&\n      layout.width &&\n      // We should fade-in the indicator when we have widths for all the tab items\n      navigationState.routes.every((_, i) => getTabWidth(i))\n    ) {\n      this.isIndicatorShown = true;\n\n      Animated.timing(this.opacity, {\n        duration: 150,\n        toValue: 1,\n        easing: Easing.in(Easing.linear),\n      }).start();\n    }\n  };\n\n  private isIndicatorShown = false;\n\n  private opacity = new Animated.Value(this.props.width === 'auto' ? 0 : 1);\n\n  private getTranslateX = memoize(\n    (\n      position: Animated.Node<number>,\n      routes: Route[],\n      getTabWidth: GetTabWidth\n    ) => {\n      const inputRange = routes.map((_, i) => i);\n\n      // every index contains widths at all previous indices\n      const outputRange = routes.reduce<number[]>((acc, _, i) => {\n        if (i === 0) return [0];\n        return [...acc, acc[i - 1] + getTabWidth(i - 1)];\n      }, []);\n\n      const translateX = interpolate(position, {\n        inputRange,\n        outputRange,\n        extrapolate: Extrapolate.CLAMP,\n      });\n\n      return multiply(translateX, I18nManager.isRTL ? -1 : 1);\n    }\n  );\n\n  private getWidth = memoize(\n    (\n      position: Animated.Node<number>,\n      routes: Route[],\n      getTabWidth: GetTabWidth\n    ) => {\n      const inputRange = routes.map((_, i) => i);\n      const outputRange = inputRange.map(getTabWidth);\n\n      return interpolate(position, {\n        inputRange,\n        outputRange,\n        extrapolate: Extrapolate.CLAMP,\n      });\n    }\n  );\n\n  render() {\n    const {\n      position,\n      navigationState,\n      getTabWidth,\n      width,\n      style,\n      layout,\n    } = this.props;\n    const { routes } = navigationState;\n\n    const translateX =\n      routes.length > 1 ? this.getTranslateX(position, routes, getTabWidth) : 0;\n\n    const indicatorWidth =\n      width === 'auto'\n        ? routes.length > 1\n          ? this.getWidth(position, routes, getTabWidth)\n          : getTabWidth(0)\n        : width;\n\n    return (\n      <Animated.View\n        style={[\n          styles.indicator,\n          // If layout is not available, use `left` property for positioning the indicator\n          // This avoids rendering delay until we are able to calculate translateX\n          { width: indicatorWidth },\n          layout.width\n            ? { transform: [{ translateX }] as any }\n            : { left: `${(100 / routes.length) * navigationState.index}%` },\n          width === 'auto' ? { opacity: this.opacity } : null,\n          style,\n        ]}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  indicator: {\n    backgroundColor: '#ffeb3b',\n    position: 'absolute',\n    left: 0,\n    bottom: 0,\n    right: 0,\n    height: 2,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}