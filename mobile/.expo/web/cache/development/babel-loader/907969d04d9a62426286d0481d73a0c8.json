{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAnimatedDebug = createAnimatedDebug;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _val = require(\"../val\");\n\nvar _AnimatedNode2 = _interopRequireDefault(require(\"./AnimatedNode\"));\n\nvar _AnimatedBlock = require(\"./AnimatedBlock\");\n\nvar _AnimatedCall = require(\"./AnimatedCall\");\n\nvar AnimatedDebug = function (_AnimatedNode) {\n  (0, _inherits2.default)(AnimatedDebug, _AnimatedNode);\n\n  function AnimatedDebug(message, value) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, AnimatedDebug);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AnimatedDebug).call(this, {\n      type: 'debug',\n      message: message,\n      value: value.__nodeID\n    }, [value]));\n    _this._message = message;\n    _this._value = value;\n    return _this;\n  }\n\n  (0, _createClass2.default)(AnimatedDebug, [{\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      var value = (0, _val.val)(this._value);\n      console.log(this._message, value);\n      return value;\n    }\n  }]);\n  return AnimatedDebug;\n}(_AnimatedNode2.default);\n\nfunction createAnimatedDebug(message, value) {\n  if (__DEV__) {\n    var runningInRemoteDebugger = typeof atob !== 'undefined';\n    var runningInExpoShell = global.Expo && global.Expo.Constants.appOwnership !== 'standalone';\n\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      return (0, _AnimatedBlock.createAnimatedBlock)([(0, _AnimatedCall.createAnimatedCall)([value], function (_ref) {\n        var _ref2 = (0, _slicedToArray2.default)(_ref, 1),\n            a = _ref2[0];\n\n        return console.log(message + \" \" + a);\n      }), value]);\n    } else {\n      return new AnimatedDebug(message, (0, _AnimatedBlock.adapt)(value));\n    }\n  }\n\n  return value;\n}","map":{"version":3,"sources":["/Users/derickkaiser/Documents/Bootcamp2019/bootcamp-fastfeet/mobile/node_modules/react-native-reanimated/src/core/AnimatedDebug.js"],"names":["AnimatedDebug","message","value","type","__nodeID","_message","_value","console","log","AnimatedNode","createAnimatedDebug","__DEV__","runningInRemoteDebugger","atob","runningInExpoShell","global","Expo","Constants","appOwnership","a"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;IAEMA,a;;;AAIJ,yBAAYC,OAAZ,EAAqBC,KAArB,EAA4B;AAAA;;AAAA;AAC1B,mHAAM;AAAEC,MAAAA,IAAI,EAAE,OAAR;AAAiBF,MAAAA,OAAO,EAAPA,OAAjB;AAA0BC,MAAAA,KAAK,EAAEA,KAAK,CAACE;AAAvC,KAAN,EAAyD,CAACF,KAAD,CAAzD;AACA,UAAKG,QAAL,GAAgBJ,OAAhB;AACA,UAAKK,MAAL,GAAcJ,KAAd;AAH0B;AAI3B;;;;mCAEc;AACb,UAAMA,KAAK,GAAG,cAAI,KAAKI,MAAT,CAAd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,QAAjB,EAA2BH,KAA3B;AACA,aAAOA,KAAP;AACD;;;EAdyBO,sB;;AAiBrB,SAASC,mBAAT,CAA6BT,OAA7B,EAAsCC,KAAtC,EAA6C;AAClD,MAAIS,OAAJ,EAAa;AACX,QAAMC,uBAAuB,GAAG,OAAOC,IAAP,KAAgB,WAAhD;AAIA,QAAMC,kBAAkB,GACtBC,MAAM,CAACC,IAAP,IAAeD,MAAM,CAACC,IAAP,CAAYC,SAAZ,CAAsBC,YAAtB,KAAuC,YADxD;;AAGA,QAAIN,uBAAuB,IAAIE,kBAA/B,EAAmD;AAGjD,aAAO,wCAAM,CACX,sCAAK,CAACZ,KAAD,CAAL,EAAc;AAAA;AAAA,YAAEiB,CAAF;;AAAA,eAASZ,OAAO,CAACC,GAAR,CAAeP,OAAf,SAA0BkB,CAA1B,CAAT;AAAA,OAAd,CADW,EAEXjB,KAFW,CAAN,CAAP;AAID,KAPD,MAOO;AACL,aAAO,IAAIF,aAAJ,CAAkBC,OAAlB,EAA2B,0BAAMC,KAAN,CAA3B,CAAP;AACD;AACF;;AAED,SAAOA,KAAP;AACD","sourcesContent":["import { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\nimport { createAnimatedBlock as block, adapt } from './AnimatedBlock';\nimport { createAnimatedCall as call } from './AnimatedCall';\n\nclass AnimatedDebug extends AnimatedNode {\n  _message;\n  _value;\n\n  constructor(message, value) {\n    super({ type: 'debug', message, value: value.__nodeID }, [value]);\n    this._message = message;\n    this._value = value;\n  }\n\n  __onEvaluate() {\n    const value = val(this._value);\n    console.log(this._message, value);\n    return value;\n  }\n}\n\nexport function createAnimatedDebug(message, value) {\n  if (__DEV__) {\n    const runningInRemoteDebugger = typeof atob !== 'undefined';\n    // hack to detect if app is running in remote debugger\n    // https://stackoverflow.com/questions/39022216\n\n    const runningInExpoShell =\n      global.Expo && global.Expo.Constants.appOwnership !== 'standalone';\n\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      // When running in expo or remote debugger we use JS console.log to output variables\n      // otherwise we output to the native console using native debug node\n      return block([\n        call([value], ([a]) => console.log(`${message} ${a}`)),\n        value,\n      ]);\n    } else {\n      return new AnimatedDebug(message, adapt(value));\n    }\n  }\n  // Debugging is disabled in PROD\n  return value;\n}\n"]},"metadata":{},"sourceType":"script"}