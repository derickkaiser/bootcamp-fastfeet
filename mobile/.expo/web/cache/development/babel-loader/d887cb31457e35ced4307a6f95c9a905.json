{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar NavigationActions = _interopRequireWildcard(require(\"../NavigationActions\"));\n\nvar _invariant = _interopRequireDefault(require(\"../utils/invariant\"));\n\nvar getNavigationActionCreators = function getNavigationActionCreators(route) {\n  return {\n    goBack: function goBack(key) {\n      var actualizedKey = key;\n\n      if (key === undefined && route.key) {\n        (0, _invariant.default)(typeof route.key === 'string', 'key should be a string');\n        actualizedKey = route.key;\n      }\n\n      return NavigationActions.back({\n        key: actualizedKey\n      });\n    },\n    navigate: function navigate(navigateTo, params, action) {\n      if (typeof navigateTo === 'string') {\n        return NavigationActions.navigate({\n          routeName: navigateTo,\n          params: params,\n          action: action\n        });\n      }\n\n      (0, _invariant.default)(typeof navigateTo === 'object', 'Must navigateTo an object or a string');\n      (0, _invariant.default)(params == null, 'Params must not be provided to .navigate() when specifying an object');\n      (0, _invariant.default)(action == null, 'Child action must not be provided to .navigate() when specifying an object');\n      return NavigationActions.navigate(navigateTo);\n    },\n    setParams: function setParams(params) {\n      (0, _invariant.default)(route.key && typeof route.key === 'string', 'setParams cannot be called by root navigator');\n      return NavigationActions.setParams({\n        params: params,\n        key: route.key\n      });\n    }\n  };\n};\n\nvar _default = getNavigationActionCreators;\nexports.default = _default;","map":{"version":3,"sources":["getNavigationActionCreators.js"],"names":["getNavigationActionCreators","goBack","actualizedKey","key","route","invariant","NavigationActions","navigate","routeName","params","action","setParams"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,2BAA2B,GAA3BA,SAAAA,2BAAAA,CAA8B,KAA9BA,EAAuC;AAC3C,SAAO;AACLC,IAAAA,MAAM,EAAE,SAAA,MAAA,CAAA,GAAA,EAAO;AACb,UAAIC,aAAa,GAAjB,GAAA;;AACA,UAAIC,GAAG,KAAHA,SAAAA,IAAqBC,KAAK,CAA9B,GAAA,EAAoC;AAClCC,gCAAU,OAAOD,KAAK,CAAZ,GAAA,KAAD,QAATC,EAAAA,wBAAAA;AACAH,QAAAA,aAAa,GAAGE,KAAK,CAArBF,GAAAA;AAEF;;AAAA,aAAOI,iBAAiB,CAAjBA,IAAAA,CAAuB;AAAEH,QAAAA,GAAG,EAAnC;AAA8B,OAAvBG,CAAP;AAPG,KAAA;AASLC,IAAAA,QAAQ,EAAE,SAAA,QAAA,CAAA,UAAA,EAAA,MAAA,EAAA,MAAA,EAAgC;AACxC,UAAI,OAAA,UAAA,KAAJ,QAAA,EAAoC;AAClC,eAAOD,iBAAiB,CAAjBA,QAAAA,CAA2B;AAChCE,UAAAA,SAAS,EADuB,UAAA;AAEhCC,UAAAA,MAAM,EAF0B,MAAA;AAGhCC,UAAAA,MAAM,EAHR;AAAkC,SAA3BJ,CAAP;AAMFD;;AAAAA,8BACE,OAAA,UAAA,KADO,QAATA,EAAAA,uCAAAA;AAIAA,8BACEI,MAAM,IADC,IAATJ,EAAAA,sEAAAA;AAIAA,8BACEK,MAAM,IADC,IAATL,EAAAA,4EAAAA;AAIA,aAAOC,iBAAiB,CAAjBA,QAAAA,CAAP,UAAOA,CAAP;AA7BG,KAAA;AA+BLK,IAAAA,SAAS,EAAE,SAAA,SAAA,CAAA,MAAA,EAAU;AACnBN,8BACED,KAAK,CAALA,GAAAA,IAAa,OAAOA,KAAK,CAAZ,GAAA,KADN,QAATC,EAAAA,8CAAAA;AAIA,aAAOC,iBAAiB,CAAjBA,SAAAA,CAA4B;AAAEG,QAAAA,MAAM,EAAR,MAAA;AAAUN,QAAAA,GAAG,EAAEC,KAAK,CAAvD;AAAmC,OAA5BE,CAAP;AApCJ;AAAO,GAAP;AADF,CAAA;;eA0CA,2B","sourcesContent":["import * as NavigationActions from '../NavigationActions';\nimport invariant from '../utils/invariant';\n\nconst getNavigationActionCreators = route => {\n  return {\n    goBack: key => {\n      let actualizedKey = key;\n      if (key === undefined && route.key) {\n        invariant(typeof route.key === 'string', 'key should be a string');\n        actualizedKey = route.key;\n      }\n      return NavigationActions.back({ key: actualizedKey });\n    },\n    navigate: (navigateTo, params, action) => {\n      if (typeof navigateTo === 'string') {\n        return NavigationActions.navigate({\n          routeName: navigateTo,\n          params,\n          action,\n        });\n      }\n      invariant(\n        typeof navigateTo === 'object',\n        'Must navigateTo an object or a string'\n      );\n      invariant(\n        params == null,\n        'Params must not be provided to .navigate() when specifying an object'\n      );\n      invariant(\n        action == null,\n        'Child action must not be provided to .navigate() when specifying an object'\n      );\n      return NavigationActions.navigate(navigateTo);\n    },\n    setParams: params => {\n      invariant(\n        route.key && typeof route.key === 'string',\n        'setParams cannot be called by root navigator'\n      );\n      return NavigationActions.setParams({ params, key: route.key });\n    },\n  };\n};\n\nexport default getNavigationActionCreators;\n"]},"metadata":{},"sourceType":"script"}