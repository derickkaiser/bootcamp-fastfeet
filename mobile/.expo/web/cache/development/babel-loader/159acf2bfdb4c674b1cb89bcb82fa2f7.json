{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createToolbarAndroidComponent;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _isEqual = _interopRequireDefault(require(\"lodash/isEqual\"));\n\nvar _pick = _interopRequireDefault(require(\"lodash/pick\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactNative = require(\"./react-native\");\n\nvar _jsxFileName = \"/Users/derickkaiser/Documents/Bootcamp2019/bootcamp-fastfeet/mobile/node_modules/react-native-vector-icons/lib/toolbar-android.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar ICON_PROP_NAMES = ['iconSize', 'iconColor', 'titleColor'];\nvar LOGO_ICON_PROP_NAMES = [].concat(ICON_PROP_NAMES, ['logoName']);\nvar NAV_ICON_PROP_NAMES = [].concat(ICON_PROP_NAMES, ['navIconName']);\nvar OVERFLOW_ICON_PROP_NAMES = [].concat(ICON_PROP_NAMES, ['overflowIconName']);\nvar ACTIONS_PROP_NAMES = [].concat(ICON_PROP_NAMES, ['actions']);\n\nvar arePropsEqual = function arePropsEqual(keys) {\n  return function (prevProps, nextProps) {\n    return (0, _isEqual.default)((0, _pick.default)(prevProps, keys), (0, _pick.default)(nextProps, keys));\n  };\n};\n\nvar areLogoIconPropsEqual = arePropsEqual(LOGO_ICON_PROP_NAMES);\nvar areNavIconPropsEqual = arePropsEqual(NAV_ICON_PROP_NAMES);\nvar areOverflowIconPropsEqual = arePropsEqual(OVERFLOW_ICON_PROP_NAMES);\nvar areActionPropsEqual = arePropsEqual(ACTIONS_PROP_NAMES);\n\nfunction createToolbarAndroidComponent(IconNamePropType, getImageSource) {\n  var _class, _temp;\n\n  return _temp = _class = function (_PureComponent) {\n    (0, _inherits2.default)(IconToolbarAndroid, _PureComponent);\n\n    function IconToolbarAndroid() {\n      var _getPrototypeOf2;\n\n      var _this;\n\n      (0, _classCallCheck2.default)(this, IconToolbarAndroid);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(IconToolbarAndroid)).call.apply(_getPrototypeOf2, [this].concat(args)));\n      _this.state = {\n        logo: undefined,\n        navIcon: undefined,\n        overflowIcon: undefined,\n        actions: undefined\n      };\n      return _this;\n    }\n\n    (0, _createClass2.default)(IconToolbarAndroid, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        this.updateLogoIconSource();\n        this.updateNavIconSource();\n        this.updateOverflowIconSource();\n        this.updateActionIconSources();\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(prevProps) {\n        if (!areLogoIconPropsEqual(prevProps, this.props)) {\n          this.updateLogoIconSource();\n        }\n\n        if (!areNavIconPropsEqual(prevProps, this.props)) {\n          this.updateNavIconSource();\n        }\n\n        if (!areOverflowIconPropsEqual(prevProps, this.props)) {\n          this.updateOverflowIconSource();\n        }\n\n        if (!areActionPropsEqual(prevProps, this.props)) {\n          this.updateActionIconSources();\n        }\n      }\n    }, {\n      key: \"updateLogoIconSource\",\n      value: function updateLogoIconSource() {\n        var _this$props, logoName, iconSize, iconColor, titleColor, logo;\n\n        return _regenerator.default.async(function updateLogoIconSource$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this$props = this.props, logoName = _this$props.logoName, iconSize = _this$props.iconSize, iconColor = _this$props.iconColor, titleColor = _this$props.titleColor;\n\n                if (!logoName) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.next = 4;\n                return _regenerator.default.awrap(getImageSource(logoName, iconSize, iconColor || titleColor));\n\n              case 4:\n                logo = _context.sent;\n                this.setState({\n                  logo: logo\n                });\n                _context.next = 9;\n                break;\n\n              case 8:\n                if (this.state.logo) {\n                  this.setState({\n                    logo: undefined\n                  });\n                }\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, this);\n      }\n    }, {\n      key: \"updateNavIconSource\",\n      value: function updateNavIconSource() {\n        var _this$props2, navIconName, iconSize, iconColor, titleColor, navIcon;\n\n        return _regenerator.default.async(function updateNavIconSource$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this$props2 = this.props, navIconName = _this$props2.navIconName, iconSize = _this$props2.iconSize, iconColor = _this$props2.iconColor, titleColor = _this$props2.titleColor;\n\n                if (!navIconName) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                _context2.next = 4;\n                return _regenerator.default.awrap(getImageSource(navIconName, iconSize, iconColor || titleColor));\n\n              case 4:\n                navIcon = _context2.sent;\n                this.setState({\n                  navIcon: navIcon\n                });\n                _context2.next = 9;\n                break;\n\n              case 8:\n                if (this.state.navIcon) {\n                  this.setState({\n                    navIcon: undefined\n                  });\n                }\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, this);\n      }\n    }, {\n      key: \"updateOverflowIconSource\",\n      value: function updateOverflowIconSource() {\n        var _this$props3, overflowIconName, iconSize, iconColor, titleColor, overflowIcon;\n\n        return _regenerator.default.async(function updateOverflowIconSource$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this$props3 = this.props, overflowIconName = _this$props3.overflowIconName, iconSize = _this$props3.iconSize, iconColor = _this$props3.iconColor, titleColor = _this$props3.titleColor;\n\n                if (!overflowIconName) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                _context3.next = 4;\n                return _regenerator.default.awrap(getImageSource(overflowIconName, iconSize, iconColor || titleColor));\n\n              case 4:\n                overflowIcon = _context3.sent;\n                this.setState({\n                  overflowIcon: overflowIcon\n                });\n                _context3.next = 9;\n                break;\n\n              case 8:\n                if (this.state.overflowIcon) {\n                  this.setState({\n                    overflowIcon: undefined\n                  });\n                }\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, this);\n      }\n    }, {\n      key: \"updateActionIconSources\",\n      value: function updateActionIconSources() {\n        var _this$props4, actions, iconSize, iconColor, titleColor, updatedActions;\n\n        return _regenerator.default.async(function updateActionIconSources$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _this$props4 = this.props, actions = _this$props4.actions, iconSize = _this$props4.iconSize, iconColor = _this$props4.iconColor, titleColor = _this$props4.titleColor;\n                _context4.next = 3;\n                return _regenerator.default.awrap(Promise.all((actions || []).map(function (action) {\n                  if (action.iconName) {\n                    return getImageSource(action.iconName, action.iconSize || iconSize, action.iconColor || iconColor || titleColor).then(function (icon) {\n                      return _objectSpread({}, action, {\n                        icon: icon\n                      });\n                    });\n                  }\n\n                  return Promise.resolve(action);\n                })));\n\n              case 3:\n                updatedActions = _context4.sent;\n                this.setState({\n                  actions: updatedActions\n                });\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, null, this);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        return _react.default.createElement(_reactNative.ToolbarAndroid, (0, _extends2.default)({}, this.props, this.state, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          }\n        }));\n      }\n    }]);\n    return IconToolbarAndroid;\n  }(_react.PureComponent), _class.propTypes = {\n    logoName: IconNamePropType,\n    navIconName: IconNamePropType,\n    overflowIconName: IconNamePropType,\n    actions: _propTypes.default.arrayOf(_propTypes.default.shape({\n      title: _propTypes.default.string.isRequired,\n      iconName: IconNamePropType,\n      iconSize: _propTypes.default.number,\n      iconColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),\n      show: _propTypes.default.oneOf(['always', 'ifRoom', 'never']),\n      showWithText: _propTypes.default.bool\n    })),\n    iconSize: _propTypes.default.number,\n    iconColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),\n    titleColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])\n  }, _class.defaultProps = {\n    iconSize: 24\n  }, _temp;\n}","map":{"version":3,"sources":["/Users/derickkaiser/Documents/Bootcamp2019/bootcamp-fastfeet/mobile/node_modules/react-native-vector-icons/lib/toolbar-android.js"],"names":["ICON_PROP_NAMES","LOGO_ICON_PROP_NAMES","NAV_ICON_PROP_NAMES","OVERFLOW_ICON_PROP_NAMES","ACTIONS_PROP_NAMES","arePropsEqual","keys","prevProps","nextProps","areLogoIconPropsEqual","areNavIconPropsEqual","areOverflowIconPropsEqual","areActionPropsEqual","createToolbarAndroidComponent","IconNamePropType","getImageSource","state","logo","undefined","navIcon","overflowIcon","actions","updateLogoIconSource","updateNavIconSource","updateOverflowIconSource","updateActionIconSources","props","logoName","iconSize","iconColor","titleColor","setState","navIconName","overflowIconName","Promise","all","map","action","iconName","then","icon","resolve","updatedActions","PureComponent","propTypes","PropTypes","arrayOf","shape","title","string","isRequired","number","oneOfType","show","oneOf","showWithText","bool","defaultProps"],"mappings":"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","sourcesContent":["/* eslint-disable react/no-unused-prop-types */\nimport isEqual from 'lodash/isEqual';\nimport pick from 'lodash/pick';\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { ToolbarAndroid } from './react-native';\n\nconst ICON_PROP_NAMES = ['iconSize', 'iconColor', 'titleColor'];\nconst LOGO_ICON_PROP_NAMES = [...ICON_PROP_NAMES, 'logoName'];\nconst NAV_ICON_PROP_NAMES = [...ICON_PROP_NAMES, 'navIconName'];\nconst OVERFLOW_ICON_PROP_NAMES = [...ICON_PROP_NAMES, 'overflowIconName'];\nconst ACTIONS_PROP_NAMES = [...ICON_PROP_NAMES, 'actions'];\n\nconst arePropsEqual = keys => (prevProps, nextProps) =>\n  isEqual(pick(prevProps, keys), pick(nextProps, keys));\n\nconst areLogoIconPropsEqual = arePropsEqual(LOGO_ICON_PROP_NAMES);\nconst areNavIconPropsEqual = arePropsEqual(NAV_ICON_PROP_NAMES);\nconst areOverflowIconPropsEqual = arePropsEqual(OVERFLOW_ICON_PROP_NAMES);\nconst areActionPropsEqual = arePropsEqual(ACTIONS_PROP_NAMES);\n\nexport default function createToolbarAndroidComponent(\n  IconNamePropType,\n  getImageSource\n) {\n  return class IconToolbarAndroid extends PureComponent {\n    static propTypes = {\n      logoName: IconNamePropType,\n      navIconName: IconNamePropType,\n      overflowIconName: IconNamePropType,\n      actions: PropTypes.arrayOf(\n        PropTypes.shape({\n          title: PropTypes.string.isRequired,\n          iconName: IconNamePropType,\n          iconSize: PropTypes.number,\n          iconColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n          show: PropTypes.oneOf(['always', 'ifRoom', 'never']),\n          showWithText: PropTypes.bool,\n        })\n      ),\n      iconSize: PropTypes.number,\n      iconColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      titleColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    };\n\n    static defaultProps = {\n      iconSize: 24,\n    };\n\n    state = {\n      logo: undefined,\n      navIcon: undefined,\n      overflowIcon: undefined,\n      actions: undefined,\n    };\n\n    componentDidMount() {\n      this.updateLogoIconSource();\n      this.updateNavIconSource();\n      this.updateOverflowIconSource();\n      this.updateActionIconSources();\n    }\n\n    componentDidUpdate(prevProps) {\n      if (!areLogoIconPropsEqual(prevProps, this.props)) {\n        this.updateLogoIconSource();\n      }\n      if (!areNavIconPropsEqual(prevProps, this.props)) {\n        this.updateNavIconSource();\n      }\n      if (!areOverflowIconPropsEqual(prevProps, this.props)) {\n        this.updateOverflowIconSource();\n      }\n      if (!areActionPropsEqual(prevProps, this.props)) {\n        this.updateActionIconSources();\n      }\n    }\n\n    async updateLogoIconSource() {\n      const { logoName, iconSize, iconColor, titleColor } = this.props;\n      if (logoName) {\n        const logo = await getImageSource(\n          logoName,\n          iconSize,\n          iconColor || titleColor\n        );\n        this.setState({ logo });\n        // eslint-disable-next-line react/destructuring-assignment\n      } else if (this.state.logo) {\n        this.setState({ logo: undefined });\n      }\n    }\n\n    async updateNavIconSource() {\n      const { navIconName, iconSize, iconColor, titleColor } = this.props;\n      if (navIconName) {\n        const navIcon = await getImageSource(\n          navIconName,\n          iconSize,\n          iconColor || titleColor\n        );\n        this.setState({ navIcon });\n        // eslint-disable-next-line react/destructuring-assignment\n      } else if (this.state.navIcon) {\n        this.setState({ navIcon: undefined });\n      }\n    }\n\n    async updateOverflowIconSource() {\n      const { overflowIconName, iconSize, iconColor, titleColor } = this.props;\n      if (overflowIconName) {\n        const overflowIcon = await getImageSource(\n          overflowIconName,\n          iconSize,\n          iconColor || titleColor\n        );\n        this.setState({ overflowIcon });\n        // eslint-disable-next-line react/destructuring-assignment\n      } else if (this.state.overflowIcon) {\n        this.setState({ overflowIcon: undefined });\n      }\n    }\n\n    async updateActionIconSources() {\n      const { actions, iconSize, iconColor, titleColor } = this.props;\n      const updatedActions = await Promise.all(\n        (actions || []).map(action => {\n          if (action.iconName) {\n            return getImageSource(\n              action.iconName,\n              action.iconSize || iconSize,\n              action.iconColor || iconColor || titleColor\n            ).then(icon => ({ ...action, icon }));\n          }\n          return Promise.resolve(action);\n        })\n      );\n      this.setState({ actions: updatedActions });\n    }\n\n    render() {\n      return <ToolbarAndroid {...this.props} {...this.state} />;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"script"}