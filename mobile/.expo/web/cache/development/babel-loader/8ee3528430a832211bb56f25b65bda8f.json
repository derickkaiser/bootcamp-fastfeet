{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeScreens = require(\"react-native-screens\");\n\nvar _reactNavigation = require(\"react-navigation\");\n\nvar _createPointerEventsContainer = _interopRequireDefault(require(\"./createPointerEventsContainer\"));\n\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/react-navigation-stack/src/views/StackView/StackViewCard.tsx\";\nvar EPS = 1e-5;\n\nfunction getAccessibilityProps(isActive) {\n  if (_reactNative.Platform.OS === 'ios') {\n    return {\n      accessibilityElementsHidden: !isActive\n    };\n  } else if (_reactNative.Platform.OS === 'android') {\n    return {\n      importantForAccessibility: isActive ? 'yes' : 'no-hide-descendants'\n    };\n  } else {\n    return {};\n  }\n}\n\nvar Card = function (_React$Component) {\n  (0, _inherits2.default)(Card, _React$Component);\n\n  function Card() {\n    (0, _classCallCheck2.default)(this, Card);\n    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Card).apply(this, arguments));\n  }\n\n  (0, _createClass2.default)(Card, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          pointerEvents = _this$props.pointerEvents,\n          style = _this$props.style,\n          position = _this$props.position,\n          transparent = _this$props.transparent,\n          _this$props$scene = _this$props.scene,\n          index = _this$props$scene.index,\n          isActive = _this$props$scene.isActive;\n\n      var active = _reactNative.Platform.select({\n        web: isActive,\n        default: transparent || isActive ? 1 : position.interpolate({\n          inputRange: [index, index + 1 - EPS, index + 1],\n          outputRange: [1, 1, 0],\n          extrapolate: 'clamp'\n        })\n      });\n\n      var animatedStyle = this.props.animatedStyle || {};\n      var shadowOpacity = animatedStyle.shadowOpacity,\n          overlayOpacity = animatedStyle.overlayOpacity,\n          containerAnimatedStyle = (0, _objectWithoutProperties2.default)(animatedStyle, [\"shadowOpacity\", \"overlayOpacity\"]);\n      var flattenedStyle = _reactNative.StyleSheet.flatten(style) || {};\n      var backgroundColor = flattenedStyle.backgroundColor,\n          screenStyle = (0, _objectWithoutProperties2.default)(flattenedStyle, [\"backgroundColor\"]);\n      var isDark = this.context === 'dark';\n      var baseCardStyle;\n\n      if (isDark) {\n        baseCardStyle = transparent ? styles.transparentDark : styles.cardDark;\n      } else {\n        baseCardStyle = transparent ? styles.transparentLight : styles.cardLight;\n      }\n\n      return React.createElement(_reactNativeScreens.Screen, {\n        pointerEvents: pointerEvents,\n        onComponentRef: this.props.onComponentRef,\n        style: [containerAnimatedStyle, screenStyle],\n        active: active,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        }\n      }, !transparent && shadowOpacity ? React.createElement(_reactNative.Animated.View, {\n        style: [styles.shadow, {\n          shadowOpacity: shadowOpacity\n        }],\n        pointerEvents: \"none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        }\n      }) : null, React.createElement(_reactNative.Animated.View, (0, _extends2.default)({}, getAccessibilityProps(isActive), {\n        style: [baseCardStyle, backgroundColor && backgroundColor !== 'transparent' ? {\n          backgroundColor: backgroundColor\n        } : null],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        }\n      }), children), overlayOpacity ? React.createElement(_reactNative.Animated.View, {\n        pointerEvents: \"none\",\n        style: [isDark ? styles.overlayDark : styles.overlayLight, {\n          opacity: overlayOpacity\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        }\n      }) : null);\n    }\n  }]);\n  return Card;\n}(React.Component);\n\nCard.contextType = _reactNavigation.ThemeContext;\n\nvar styles = _reactNative.StyleSheet.create({\n  cardLight: {\n    flex: 1,\n    backgroundColor: _reactNavigation.ThemeColors.light.body\n  },\n  cardDark: {\n    flex: 1,\n    backgroundColor: _reactNavigation.ThemeColors.dark.body\n  },\n  overlayLight: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject, {\n    backgroundColor: '#000'\n  }),\n  overlayDark: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject, {\n    backgroundColor: '#fff'\n  }),\n  shadow: {\n    top: 0,\n    left: 0,\n    bottom: 0,\n    width: 3,\n    position: 'absolute',\n    backgroundColor: '#fff',\n    shadowOffset: {\n      width: -1,\n      height: 1\n    },\n    shadowRadius: 5,\n    shadowColor: '#000'\n  },\n  transparentLight: {\n    flex: 1,\n    backgroundColor: 'transparent'\n  },\n  transparentDark: {\n    flex: 1,\n    backgroundColor: 'transparent'\n  }\n});\n\nvar _default = (0, _createPointerEventsContainer.default)(Card);\n\nexports.default = _default;","map":{"version":3,"sources":["StackViewCard.tsx"],"names":["EPS","Platform","accessibilityElementsHidden","importantForAccessibility","isActive","Card","React","Component","contextType","ThemeContext","children","pointerEvents","style","position","transparent","index","active","web","default","inputRange","outputRange","extrapolate","animatedStyle","shadowOpacity","overlayOpacity","containerAnimatedStyle","flattenedStyle","StyleSheet","backgroundColor","screenStyle","isDark","baseCardStyle","styles","getAccessibilityProps","opacity","cardLight","flex","ThemeColors","cardDark","overlayLight","overlayDark","shadow","top","left","bottom","width","shadowOffset","height","shadowRadius","shadowColor","transparentLight","transparentDark","createPointerEventsContainer"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  Platform,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\nimport { Screen } from 'react-native-screens';\nimport { ThemeContext, ThemeColors } from 'react-navigation';\n\nimport createPointerEventsContainer, {\n  InputProps,\n  InjectedProps,\n} from './createPointerEventsContainer';\n\ntype Props = InputProps &\n  InjectedProps & {\n    style: StyleProp<ViewStyle>;\n    animatedStyle: any;\n    position: Animated.AnimatedInterpolation;\n    transparent?: boolean;\n    children: React.ReactNode;\n  };\n\nconst EPS = 1e-5;\n\nfunction getAccessibilityProps(isActive: boolean) {\n  if (Platform.OS === 'ios') {\n    return {\n      accessibilityElementsHidden: !isActive,\n    };\n  } else if (Platform.OS === 'android') {\n    return {\n      importantForAccessibility: isActive ? 'yes' : 'no-hide-descendants',\n    };\n  } else {\n    return {};\n  }\n}\n\n/**\n * Component that renders the scene as card for the <StackView />.\n */\nclass Card extends React.Component<Props> {\n  static contextType = ThemeContext;\n  context!: React.ContextType<typeof ThemeContext>;\n\n  render() {\n    const {\n      children,\n      pointerEvents,\n      style,\n      position,\n      transparent,\n      scene: { index, isActive },\n    } = this.props;\n\n    const active: Animated.Value | number | boolean = Platform.select({\n      web: isActive,\n      // @ts-ignore\n      default:\n        transparent || isActive\n          ? 1\n          : position.interpolate({\n              inputRange: [index, index + 1 - EPS, index + 1],\n              outputRange: [1, 1, 0],\n              extrapolate: 'clamp',\n            }),\n    });\n\n    // animatedStyle can be `false` if there is no screen interpolator\n    const animatedStyle = this.props.animatedStyle || {};\n\n    const {\n      shadowOpacity,\n      overlayOpacity,\n      ...containerAnimatedStyle\n    } = animatedStyle;\n\n    let flattenedStyle = StyleSheet.flatten(style) || {};\n    let { backgroundColor, ...screenStyle } = flattenedStyle;\n    let isDark = this.context === 'dark';\n    let baseCardStyle;\n\n    if (isDark) {\n      baseCardStyle = transparent ? styles.transparentDark : styles.cardDark;\n    } else {\n      baseCardStyle = transparent ? styles.transparentLight : styles.cardLight;\n    }\n\n    return (\n      <Screen\n        pointerEvents={pointerEvents}\n        onComponentRef={this.props.onComponentRef}\n        style={[containerAnimatedStyle, screenStyle]}\n        // @ts-ignore\n        active={active}\n      >\n        {!transparent && shadowOpacity ? (\n          <Animated.View\n            style={[styles.shadow, { shadowOpacity }]}\n            pointerEvents=\"none\"\n          />\n        ) : null}\n        <Animated.View\n          {...getAccessibilityProps(isActive)}\n          style={[\n            baseCardStyle,\n            backgroundColor && backgroundColor !== 'transparent'\n              ? { backgroundColor }\n              : null,\n          ]}\n        >\n          {children}\n        </Animated.View>\n        {overlayOpacity ? (\n          <Animated.View\n            pointerEvents=\"none\"\n            style={[\n              isDark ? styles.overlayDark : styles.overlayLight,\n              { opacity: overlayOpacity },\n            ]}\n          />\n        ) : null}\n      </Screen>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  cardLight: {\n    flex: 1,\n    backgroundColor: ThemeColors.light.body,\n  },\n  cardDark: {\n    flex: 1,\n    backgroundColor: ThemeColors.dark.body,\n  },\n  overlayLight: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: '#000',\n  },\n  overlayDark: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: '#fff',\n  },\n  // TODO: what should shadow be styled like?\n  shadow: {\n    top: 0,\n    left: 0,\n    bottom: 0,\n    width: 3,\n    position: 'absolute',\n    backgroundColor: '#fff',\n    shadowOffset: { width: -1, height: 1 },\n    shadowRadius: 5,\n    shadowColor: '#000',\n  },\n  transparentLight: {\n    flex: 1,\n    backgroundColor: 'transparent',\n  },\n  transparentDark: {\n    flex: 1,\n    backgroundColor: 'transparent',\n  },\n});\n\nexport default createPointerEventsContainer(Card);\n"]},"metadata":{},"sourceType":"script"}