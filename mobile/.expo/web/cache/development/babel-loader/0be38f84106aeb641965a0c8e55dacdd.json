{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNavigation = require(\"react-navigation\");\n\nvar _TouchableItem = _interopRequireDefault(require(\"../TouchableItem\"));\n\nvar _backIcon = _interopRequireDefault(require(\"../assets/back-icon.png\"));\n\nvar _BackButtonWeb = _interopRequireDefault(require(\"./BackButtonWeb\"));\n\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/react-navigation-stack/src/views/Header/HeaderBackButton.tsx\";\n\nvar HeaderBackButton = function (_React$PureComponent) {\n  (0, _inherits2.default)(HeaderBackButton, _React$PureComponent);\n\n  function HeaderBackButton() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    (0, _classCallCheck2.default)(this, HeaderBackButton);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(HeaderBackButton)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {};\n\n    _this.handleTextLayout = function (e) {\n      if (_this.state.initialTextWidth) {\n        return;\n      }\n\n      _this.setState({\n        initialTextWidth: e.nativeEvent.layout.x + e.nativeEvent.layout.width\n      });\n    };\n\n    _this.getTitleText = function () {\n      var _this$props = _this.props,\n          width = _this$props.width,\n          title = _this$props.title,\n          truncatedTitle = _this$props.truncatedTitle;\n      var initialTextWidth = _this.state.initialTextWidth;\n\n      if (title === null) {\n        return null;\n      } else if (!title) {\n        return truncatedTitle;\n      } else if (initialTextWidth && width && initialTextWidth > width) {\n        return truncatedTitle;\n      } else {\n        return title;\n      }\n    };\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(HeaderBackButton, [{\n    key: \"renderBackImage\",\n    value: function renderBackImage() {\n      var _this$props2 = this.props,\n          backImage = _this$props2.backImage,\n          backTitleVisible = _this$props2.backTitleVisible;\n      var tintColor = this.props.tintColor;\n\n      if (!tintColor && _reactNative.Platform.OS === 'android') {\n        tintColor = _reactNavigation.ThemeColors[this.context].label;\n      }\n\n      var title = this.getTitleText();\n\n      if (React.isValidElement(backImage)) {\n        return backImage;\n      } else if (backImage) {\n        return backImage({\n          tintColor: tintColor,\n          title: title\n        });\n      } else {\n        return React.createElement(_reactNative.Image, {\n          style: [styles.icon, !!backTitleVisible && styles.iconWithTitle, !!tintColor && {\n            tintColor: tintColor\n          }],\n          source: _backIcon.default,\n          fadeDuration: 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          }\n        });\n      }\n    }\n  }, {\n    key: \"maybeRenderTitle\",\n    value: function maybeRenderTitle() {\n      var _this$props3 = this.props,\n          allowFontScaling = _this$props3.allowFontScaling,\n          backTitleVisible = _this$props3.backTitleVisible,\n          titleStyle = _this$props3.titleStyle,\n          tintColor = _this$props3.tintColor;\n      var backTitleText = this.getTitleText();\n\n      if (!backTitleVisible || backTitleText === null) {\n        return null;\n      }\n\n      return React.createElement(_reactNative.Text, {\n        accessible: false,\n        onLayout: this.handleTextLayout,\n        style: [styles.title, !!tintColor && {\n          color: tintColor\n        }, titleStyle],\n        numberOfLines: 1,\n        allowFontScaling: !!allowFontScaling,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        }\n      }, this.getTitleText());\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          onPress = _this$props4.onPress,\n          pressColorAndroid = _this$props4.pressColorAndroid,\n          title = _this$props4.title,\n          disabled = _this$props4.disabled;\n      var button = React.createElement(_TouchableItem.default, {\n        disabled: disabled,\n        accessible: true,\n        accessibilityRole: \"button\",\n        accessibilityComponentType: \"button\",\n        accessibilityLabel: title ? title + \", back\" : 'Go back',\n        accessibilityTraits: \"button\",\n        testID: \"header-back\",\n        delayPressIn: 0,\n        onPress: disabled ? undefined : onPress,\n        pressColor: pressColorAndroid,\n        style: [styles.container, disabled && styles.disabled],\n        borderless: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        }\n      }, React.createElement(_reactNative.View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        }\n      }, this.renderBackImage(), this.maybeRenderTitle()));\n\n      if (_reactNative.Platform.OS === 'ios') {\n        return button;\n      } else {\n        return React.createElement(_reactNative.View, {\n          style: styles.androidButtonWrapper,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154\n          }\n        }, button);\n      }\n    }\n  }]);\n  return HeaderBackButton;\n}(React.PureComponent);\n\nHeaderBackButton.defaultProps = {\n  pressColorAndroid: 'rgba(0, 0, 0, .32)',\n  tintColor: _reactNative.Platform.select({\n    ios: '#037aff',\n    web: '#5f6368'\n  }),\n  truncatedTitle: 'Back',\n  backImage: _reactNative.Platform.select({\n    web: _BackButtonWeb.default\n  })\n};\nHeaderBackButton.contextType = _reactNavigation.ThemeContext;\n\nvar styles = _reactNative.StyleSheet.create({\n  disabled: {\n    opacity: 0.5\n  },\n  androidButtonWrapper: (0, _objectSpread2.default)({\n    margin: 13,\n    backgroundColor: 'transparent'\n  }, _reactNative.Platform.select({\n    web: {\n      marginLeft: 21\n    },\n    default: {}\n  })),\n  container: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    backgroundColor: 'transparent'\n  },\n  title: {\n    fontSize: 17,\n    paddingRight: 10\n  },\n  icon: _reactNative.Platform.select({\n    ios: {\n      backgroundColor: 'transparent',\n      height: 21,\n      width: 13,\n      marginLeft: 9,\n      marginRight: 22,\n      marginVertical: 12,\n      resizeMode: 'contain',\n      transform: [{\n        scaleX: _reactNative.I18nManager.isRTL ? -1 : 1\n      }]\n    },\n    default: {\n      height: 24,\n      width: 24,\n      margin: 3,\n      resizeMode: 'contain',\n      backgroundColor: 'transparent',\n      transform: [{\n        scaleX: _reactNative.I18nManager.isRTL ? -1 : 1\n      }]\n    }\n  }),\n  iconWithTitle: _reactNative.Platform.OS === 'ios' ? {\n    marginRight: 6\n  } : {}\n});\n\nvar _default = HeaderBackButton;\nexports.default = _default;","map":{"version":3,"sources":["HeaderBackButton.tsx"],"names":["HeaderBackButton","React","PureComponent","defaultProps","pressColorAndroid","tintColor","Platform","ios","web","truncatedTitle","backImage","contextType","ThemeContext","state","handleTextLayout","initialTextWidth","e","backTitleVisible","ThemeColors","title","styles","getTitleText","width","allowFontScaling","titleStyle","backTitleText","color","onPress","disabled","button","StyleSheet","opacity","androidButtonWrapper","margin","backgroundColor","marginLeft","default","container","alignItems","flexDirection","fontSize","paddingRight","icon","height","marginRight","marginVertical","resizeMode","transform","scaleX","I18nManager","iconWithTitle"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  I18nManager,\n  Image,\n  Text,\n  View,\n  Platform,\n  StyleSheet,\n  LayoutChangeEvent,\n} from 'react-native';\nimport { ThemeContext, ThemeColors } from 'react-navigation';\n\nimport TouchableItem from '../TouchableItem';\n\nimport defaultBackImage from '../assets/back-icon.png';\nimport BackButtonWeb from './BackButtonWeb';\nimport { HeaderBackButtonProps } from '../../types';\n\ntype Props = Omit<HeaderBackButtonProps, 'layoutPreset' | 'scene'>;\n\ntype State = {\n  initialTextWidth?: number;\n};\n\nclass HeaderBackButton extends React.PureComponent<Props, State> {\n  static defaultProps = {\n    pressColorAndroid: 'rgba(0, 0, 0, .32)',\n    tintColor: Platform.select({\n      ios: '#037aff',\n      web: '#5f6368',\n    }),\n    truncatedTitle: 'Back',\n    backImage: Platform.select({\n      web: BackButtonWeb,\n    }),\n  };\n\n  static contextType = ThemeContext;\n  context!: React.ContextType<typeof ThemeContext>;\n\n  state: State = {};\n\n  private handleTextLayout = (e: LayoutChangeEvent) => {\n    if (this.state.initialTextWidth) {\n      return;\n    }\n    this.setState({\n      initialTextWidth: e.nativeEvent.layout.x + e.nativeEvent.layout.width,\n    });\n  };\n\n  private renderBackImage() {\n    const { backImage, backTitleVisible } = this.props;\n\n    let { tintColor } = this.props;\n    if (!tintColor && Platform.OS === 'android') {\n      tintColor = ThemeColors[this.context].label;\n    }\n\n    let title = this.getTitleText();\n\n    if (React.isValidElement(backImage)) {\n      return backImage;\n    } else if (backImage) {\n      return backImage({\n        tintColor,\n        title,\n      });\n    } else {\n      return (\n        <Image\n          style={[\n            styles.icon,\n            !!backTitleVisible && styles.iconWithTitle,\n            !!tintColor && { tintColor },\n          ]}\n          source={defaultBackImage}\n          fadeDuration={0}\n        />\n      );\n    }\n  }\n\n  private getTitleText = () => {\n    const { width, title, truncatedTitle } = this.props;\n\n    let { initialTextWidth } = this.state;\n\n    if (title === null) {\n      return null;\n    } else if (!title) {\n      return truncatedTitle;\n    } else if (initialTextWidth && width && initialTextWidth > width) {\n      return truncatedTitle;\n    } else {\n      return title;\n    }\n  };\n\n  private maybeRenderTitle() {\n    const {\n      allowFontScaling,\n      backTitleVisible,\n      titleStyle,\n      tintColor,\n    } = this.props;\n    let backTitleText = this.getTitleText();\n\n    if (!backTitleVisible || backTitleText === null) {\n      return null;\n    }\n\n    return (\n      <Text\n        accessible={false}\n        onLayout={this.handleTextLayout}\n        style={[styles.title, !!tintColor && { color: tintColor }, titleStyle]}\n        numberOfLines={1}\n        allowFontScaling={!!allowFontScaling}\n      >\n        {this.getTitleText()}\n      </Text>\n    );\n  }\n\n  render() {\n    const { onPress, pressColorAndroid, title, disabled } = this.props;\n\n    let button = (\n      <TouchableItem\n        disabled={disabled}\n        accessible\n        accessibilityRole=\"button\"\n        accessibilityComponentType=\"button\"\n        accessibilityLabel={title ? `${title}, back` : 'Go back'}\n        accessibilityTraits=\"button\"\n        testID=\"header-back\"\n        delayPressIn={0}\n        onPress={disabled ? undefined : onPress}\n        pressColor={pressColorAndroid}\n        style={[styles.container, disabled && styles.disabled]}\n        borderless\n      >\n        <View style={styles.container}>\n          {this.renderBackImage()}\n          {this.maybeRenderTitle()}\n        </View>\n      </TouchableItem>\n    );\n\n    if (Platform.OS === 'ios') {\n      return button;\n    } else {\n      return <View style={styles.androidButtonWrapper}>{button}</View>;\n    }\n  }\n}\n\nconst styles = StyleSheet.create({\n  disabled: {\n    opacity: 0.5,\n  },\n  androidButtonWrapper: {\n    margin: 13,\n    backgroundColor: 'transparent',\n    ...Platform.select({\n      web: {\n        marginLeft: 21,\n      },\n      default: {},\n    }),\n  },\n  container: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    backgroundColor: 'transparent',\n  },\n  title: {\n    fontSize: 17,\n    paddingRight: 10,\n  },\n  icon: Platform.select({\n    ios: {\n      backgroundColor: 'transparent',\n      height: 21,\n      width: 13,\n      marginLeft: 9,\n      marginRight: 22,\n      marginVertical: 12,\n      resizeMode: 'contain',\n      transform: [{ scaleX: I18nManager.isRTL ? -1 : 1 }],\n    },\n    default: {\n      height: 24,\n      width: 24,\n      margin: 3,\n      resizeMode: 'contain',\n      backgroundColor: 'transparent',\n      transform: [{ scaleX: I18nManager.isRTL ? -1 : 1 }],\n    },\n  }),\n  iconWithTitle:\n    Platform.OS === 'ios'\n      ? {\n          marginRight: 6,\n        }\n      : {},\n});\n\nexport default HeaderBackButton;\n"]},"metadata":{},"sourceType":"script"}