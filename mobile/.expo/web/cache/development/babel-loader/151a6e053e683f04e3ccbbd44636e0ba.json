{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _hammerjs = _interopRequireDefault(require(\"hammerjs\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _State = _interopRequireDefault(require(\"../State\"));\n\nvar _constants = require(\"./constants\");\n\nvar NodeManager = _interopRequireWildcard(require(\"./NodeManager\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar _gestureInstances = 0;\n\nvar GestureHandler = function () {\n  (0, _createClass2.default)(GestureHandler, [{\n    key: \"id\",\n    get: function get() {\n      return \"\" + this.name + this._gestureInstance;\n    }\n  }, {\n    key: \"isDiscrete\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"shouldEnableGestureOnSetup\",\n    get: function get() {\n      throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n    }\n  }]);\n\n  function GestureHandler() {\n    var _this = this;\n\n    (0, _classCallCheck2.default)(this, GestureHandler);\n    this.isGestureRunning = false;\n    this.hasGestureFailed = false;\n    this.view = null;\n    this.config = {};\n    this.hammer = null;\n    this.pendingGestures = {};\n    this.oldState = _State.default.UNDETERMINED;\n    this.previousState = _State.default.UNDETERMINED;\n\n    this.clearSelfAsPending = function () {\n      if (Array.isArray(_this.config.waitFor)) {\n        for (var _iterator = _this.config.waitFor, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\" : \"@@iterator\"]();;) {\n          var _ref;\n\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref = _i.value;\n          }\n\n          var _gesture = _ref;\n\n          _gesture.removePendingGesture(_this.id);\n        }\n      }\n    };\n\n    this.destroy = function () {\n      _this.clearSelfAsPending();\n\n      if (_this.hammer) {\n        _this.hammer.stop();\n\n        _this.hammer.destroy();\n      }\n\n      _this.hammer = null;\n    };\n\n    this.isPointInView = function (_ref2) {\n      var x = _ref2.x,\n          y = _ref2.y;\n\n      var rect = _this.view.getBoundingClientRect();\n\n      var pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n      return pointerInside;\n    };\n\n    this.sendEvent = function (nativeEvent) {\n      var _this$ref$props = _this.ref.props,\n          onHandlerStateChange = _this$ref$props.onGestureHandlerStateChange,\n          onGestureEvent = _this$ref$props.onGestureHandlerEvent;\n\n      var event = _this.transformEventData(nativeEvent);\n\n      if (nativeEvent.isFinal) {\n        _this.oldState = _State.default.UNDETERMINED;\n        _this.previousState = _State.default.UNDETERMINED;\n      }\n\n      invokeNullableMethod('onGestureEvent', onGestureEvent, event);\n      invokeNullableMethod('onHandlerStateChange', onHandlerStateChange, event);\n    };\n\n    this.sync = function () {\n      var gesture = _this.hammer.get(_this.name);\n\n      if (!gesture) return;\n\n      var enable = function enable(recognizer, inputData) {\n        if (!_this.config.enabled) {\n          _this.isGestureRunning = false;\n          _this.hasGestureFailed = false;\n          return false;\n        }\n\n        if (!inputData || !recognizer.options || typeof inputData.maxPointers === 'undefined') {\n          return _this.shouldEnableGestureOnSetup;\n        }\n\n        if (_this.hasGestureFailed) {\n          return false;\n        }\n\n        if (!_this.isDiscrete) {\n          if (_this.isGestureRunning) {\n            return true;\n          }\n\n          _this._stillWaiting = _this._getPendingGestures();\n\n          if (_this._stillWaiting.length) {\n            for (var _iterator2 = _this._stillWaiting, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === \"function\" ? typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\" : \"@@iterator\"]();;) {\n              var _ref3;\n\n              if (_isArray2) {\n                if (_i2 >= _iterator2.length) break;\n                _ref3 = _iterator2[_i2++];\n              } else {\n                _i2 = _iterator2.next();\n                if (_i2.done) break;\n                _ref3 = _i2.value;\n              }\n\n              var _gesture3 = _ref3;\n\n              if (!_gesture3.isDiscrete && _gesture3.isGestureRunning) {\n                _this.hasGestureFailed = true;\n                _this.isGestureRunning = false;\n                return false;\n              }\n            }\n\n            return false;\n          }\n        }\n\n        if (!_this._hasCustomActivationCriteria) {\n          return true;\n        }\n\n        var deltaRotation = _this.initialRotation == null ? 0 : inputData.rotation - _this.initialRotation;\n\n        var _this$isGestureEnable = _this.isGestureEnabledForEvent(_this.getConfig(), recognizer, _objectSpread({}, inputData, {\n          deltaRotation: deltaRotation\n        })),\n            success = _this$isGestureEnable.success,\n            failed = _this$isGestureEnable.failed;\n\n        if (failed) {\n          _this.simulateCancelEvent(inputData);\n\n          _this.hasGestureFailed = true;\n        }\n\n        return success;\n      };\n\n      var params = _this.getHammerConfig();\n\n      gesture.set(_objectSpread({}, params, {\n        enable: enable\n      }));\n    };\n\n    this._gestureInstance = _gestureInstances++;\n  }\n\n  (0, _createClass2.default)(GestureHandler, [{\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this.config;\n    }\n  }, {\n    key: \"onWaitingEnded\",\n    value: function onWaitingEnded(gesture) {}\n  }, {\n    key: \"removePendingGesture\",\n    value: function removePendingGesture(id) {\n      delete this.pendingGestures[id];\n    }\n  }, {\n    key: \"addPendingGesture\",\n    value: function addPendingGesture(gesture) {\n      this.pendingGestures[gesture.id] = gesture;\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent() {\n      return {\n        success: true\n      };\n    }\n  }, {\n    key: \"parseNativeEvent\",\n    value: function parseNativeEvent(nativeEvent) {\n      return nativeEvent;\n    }\n  }, {\n    key: \"updateHasCustomActivationCriteria\",\n    value: function updateHasCustomActivationCriteria(config) {\n      return true;\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref4) {\n      var _ref4$enabled = _ref4.enabled,\n          enabled = _ref4$enabled === void 0 ? true : _ref4$enabled,\n          props = (0, _objectWithoutProperties2.default)(_ref4, [\"enabled\"]);\n      this.clearSelfAsPending();\n      this.config = ensureConfig(_objectSpread({\n        enabled: enabled\n      }, props));\n      this._hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n\n      if (Array.isArray(this.config.waitFor)) {\n        for (var _iterator3 = this.config.waitFor, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n          var _ref5;\n\n          if (_isArray3) {\n            if (_i3 >= _iterator3.length) break;\n            _ref5 = _iterator3[_i3++];\n          } else {\n            _i3 = _iterator3.next();\n            if (_i3.done) break;\n            _ref5 = _i3.value;\n          }\n\n          var _gesture4 = _ref5;\n\n          _gesture4.addPendingGesture(this);\n        }\n      }\n\n      if (this.hammer) {\n        this.sync();\n      }\n\n      return this.config;\n    }\n  }, {\n    key: \"getState\",\n    value: function getState(type) {\n      return _constants.EventMap[type];\n    }\n  }, {\n    key: \"transformEventData\",\n    value: function transformEventData(event) {\n      var eventType = event.eventType,\n          numberOfPointers = event.maxPointers;\n      var changedTouch = event.changedPointers[0];\n      var pointerInside = this.isPointInView({\n        x: changedTouch.clientX,\n        y: changedTouch.clientY\n      });\n      var state = this.getState(eventType);\n\n      if (state !== this.previousState) {\n        this.oldState = this.previousState;\n        this.previousState = state;\n      }\n\n      return {\n        nativeEvent: _objectSpread({\n          numberOfPointers: numberOfPointers,\n          state: state,\n          pointerInside: pointerInside\n        }, this.transformNativeEvent(event), {\n          handlerTag: this.handlerTag,\n          target: this.ref,\n          oldState: this.oldState\n        }),\n        timeStamp: Date.now()\n      };\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent(event) {\n      return {};\n    }\n  }, {\n    key: \"cancelPendingGestures\",\n    value: function cancelPendingGestures(event) {\n      for (var _i4 = 0, _Object$values = Object.values(this.pendingGestures); _i4 < _Object$values.length; _i4++) {\n        var gesture = _Object$values[_i4];\n\n        if (gesture && gesture.isGestureRunning) {\n          gesture.hasGestureFailed = true;\n          gesture.cancelEvent(event);\n        }\n      }\n    }\n  }, {\n    key: \"notifyPendingGestures\",\n    value: function notifyPendingGestures() {\n      for (var _i5 = 0, _Object$values2 = Object.values(this.pendingGestures); _i5 < _Object$values2.length; _i5++) {\n        var gesture = _Object$values2[_i5];\n\n        if (gesture) {\n          gesture.onWaitingEnded(this);\n        }\n      }\n    }\n  }, {\n    key: \"onGestureEnded\",\n    value: function onGestureEnded(event) {\n      this.isGestureRunning = false;\n      this.cancelPendingGestures(event);\n    }\n  }, {\n    key: \"forceInvalidate\",\n    value: function forceInvalidate(event) {\n      if (this.isGestureRunning) {\n        this.hasGestureFailed = true;\n        this.cancelEvent(event);\n      }\n    }\n  }, {\n    key: \"cancelEvent\",\n    value: function cancelEvent(event) {\n      this.notifyPendingGestures();\n      this.sendEvent(_objectSpread({}, event, {\n        eventType: _hammerjs.default.INPUT_CANCEL,\n        isFinal: true\n      }));\n      this.onGestureEnded(event);\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(_ref6) {\n      var isFirst = _ref6.isFirst;\n\n      if (isFirst) {\n        this.hasGestureFailed = false;\n      }\n    }\n  }, {\n    key: \"setView\",\n    value: function setView(ref) {\n      var _this2 = this;\n\n      if (ref == null) {\n        this.destroy();\n        this.view = null;\n        return;\n      }\n\n      this.ref = ref;\n      this.view = (0, _reactNative.findNodeHandle)(ref);\n      this.hammer = new _hammerjs.default.Manager(this.view);\n      this.oldState = _State.default.UNDETERMINED;\n      this.previousState = _State.default.UNDETERMINED;\n      var NativeGestureClass = this.NativeGestureClass;\n      var gesture = new NativeGestureClass(this.getHammerConfig());\n      this.hammer.add(gesture);\n      this.hammer.on('hammer.input', function (ev) {\n        if (!_this2.config.enabled) {\n          _this2.hasGestureFailed = false;\n          _this2.isGestureRunning = false;\n          return;\n        }\n\n        _this2.onRawEvent(ev);\n\n        if (_this2.initialRotation === null && ev.rotation !== 0) {\n          _this2.initialRotation = ev.rotation;\n        }\n\n        if (ev.isFinal) {\n          setTimeout(function () {\n            _this2.initialRotation = null;\n            _this2.hasGestureFailed = false;\n          });\n        }\n      });\n      this.setupEvents();\n      this.sync();\n    }\n  }, {\n    key: \"setupEvents\",\n    value: function setupEvents() {\n      var _this3 = this;\n\n      if (!this.isDiscrete) {\n        this.hammer.on(this.name + \"start\", function (event) {\n          return _this3.onStart(event);\n        });\n        this.hammer.on(this.name + \"end \" + this.name + \"cancel\", function (event) {\n          return _this3.onGestureEnded(event);\n        });\n      }\n\n      this.hammer.on(this.name, function (ev) {\n        return _this3.onGestureActivated(ev);\n      });\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart(_ref7) {\n      var deltaX = _ref7.deltaX,\n          deltaY = _ref7.deltaY,\n          rotation = _ref7.rotation;\n      this.isGestureRunning = true;\n      this.__initialX = deltaX;\n      this.__initialY = deltaY;\n      this.initialRotation = rotation;\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(ev) {\n      this.sendEvent(ev);\n    }\n  }, {\n    key: \"onSuccess\",\n    value: function onSuccess() {}\n  }, {\n    key: \"_getPendingGestures\",\n    value: function _getPendingGestures() {\n      if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n        var stillWaiting = this.config.waitFor.filter(function (_ref8) {\n          var hasGestureFailed = _ref8.hasGestureFailed;\n          return hasGestureFailed === false;\n        });\n        return stillWaiting;\n      }\n\n      return [];\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      var pointers = this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n      return {\n        pointers: pointers\n      };\n    }\n  }, {\n    key: \"simulateCancelEvent\",\n    value: function simulateCancelEvent(inputData) {}\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      throw new Error('Must override GestureHandler.NativeGestureClass');\n    }\n  }]);\n  return GestureHandler;\n}();\n\nfunction invokeNullableMethod(name, method, event) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n        var handler = method.__getHandler();\n\n        invokeNullableMethod(name, handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          var argMapping = method.__nodeConfig.argMapping;\n\n          if (Array.isArray(argMapping)) {\n            for (var index in argMapping) {\n              var _argMapping$index = (0, _slicedToArray2.default)(argMapping[index], 1),\n                  key = _argMapping$index[0];\n\n              if (key in event.nativeEvent) {\n                method.__nodeConfig.argMapping[index] = [key, event.nativeEvent[key]];\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction ensureConfig(config) {\n  var props = _objectSpread({}, config);\n\n  if ('minDist' in config) {\n    props.minDist = config.minDist;\n    props.minDistSq = props.minDist * props.minDist;\n  }\n\n  if ('minVelocity' in config) {\n    props.minVelocity = config.minVelocity;\n    props.minVelocitySq = props.minVelocity * props.minVelocity;\n  }\n\n  if ('maxDist' in config) {\n    props.maxDist = config.maxDist;\n    props.maxDistSq = config.maxDist * config.maxDist;\n  }\n\n  if ('waitFor' in config) {\n    props.waitFor = asArray(config.waitFor).map(function (_ref9) {\n      var _handlerTag = _ref9._handlerTag;\n      return NodeManager.getHandler(_handlerTag);\n    }).filter(function (v) {\n      return v;\n    });\n  } else {\n    props.waitFor = null;\n  }\n\n  ['minPointers', 'maxPointers', 'minDist', 'maxDist', 'maxDistSq', 'minVelocitySq', 'minDistSq', 'minVelocity', 'failOffsetXStart', 'failOffsetYStart', 'failOffsetXEnd', 'failOffsetYEnd', 'activeOffsetXStart', 'activeOffsetXEnd', 'activeOffsetYStart', 'activeOffsetYEnd'].forEach(function (prop) {\n    if (typeof props[prop] === 'undefined') {\n      props[prop] = Number.NaN;\n    }\n  });\n  return props;\n}\n\nfunction asArray(value) {\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nvar _default = GestureHandler;\nexports.default = _default;","map":{"version":3,"sources":["/Users/derickkaiser/Documents/Bootcamp2019/bootcamp-fastfeet/mobile/node_modules/react-native-gesture-handler/web/GestureHandler.js"],"names":["_gestureInstances","GestureHandler","name","_gestureInstance","Error","isGestureRunning","hasGestureFailed","view","config","hammer","pendingGestures","oldState","State","UNDETERMINED","previousState","clearSelfAsPending","Array","isArray","waitFor","gesture","removePendingGesture","id","destroy","stop","isPointInView","x","y","rect","getBoundingClientRect","pointerInside","left","right","top","bottom","sendEvent","nativeEvent","ref","props","onHandlerStateChange","onGestureHandlerStateChange","onGestureEvent","onGestureHandlerEvent","event","transformEventData","isFinal","invokeNullableMethod","sync","get","enable","recognizer","inputData","enabled","options","maxPointers","shouldEnableGestureOnSetup","isDiscrete","_stillWaiting","_getPendingGestures","length","_hasCustomActivationCriteria","deltaRotation","initialRotation","rotation","isGestureEnabledForEvent","getConfig","success","failed","simulateCancelEvent","params","getHammerConfig","set","ensureConfig","updateHasCustomActivationCriteria","addPendingGesture","type","EventMap","eventType","numberOfPointers","changedTouch","changedPointers","clientX","clientY","state","getState","transformNativeEvent","handlerTag","target","timeStamp","Date","now","Object","values","cancelEvent","onWaitingEnded","cancelPendingGestures","notifyPendingGestures","Hammer","INPUT_CANCEL","onGestureEnded","isFirst","Manager","NativeGestureClass","add","on","ev","onRawEvent","setTimeout","setupEvents","onStart","onGestureActivated","deltaX","deltaY","__initialX","__initialY","stillWaiting","filter","pointers","minPointers","method","__getHandler","handler","argMapping","__nodeConfig","index","key","minDist","minDistSq","minVelocity","minVelocitySq","maxDist","maxDistSq","asArray","map","_handlerTag","NodeManager","getHandler","v","forEach","prop","Number","NaN","value"],"mappings":"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","sourcesContent":["import Hammer from 'hammerjs';\nimport { findNodeHandle } from 'react-native';\n\nimport State from '../State';\nimport { EventMap } from './constants';\nimport * as NodeManager from './NodeManager';\n\nlet _gestureInstances = 0;\n\nclass GestureHandler {\n  isGestureRunning = false;\n  hasGestureFailed = false;\n  view = null;\n  config = {};\n  hammer = null;\n  pendingGestures = {};\n  oldState = State.UNDETERMINED;\n  previousState = State.UNDETERMINED;\n\n  get id() {\n    return `${this.name}${this._gestureInstance}`;\n  }\n\n  get isDiscrete() {\n    return false;\n  }\n\n  get shouldEnableGestureOnSetup() {\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n  }\n\n  constructor() {\n    this._gestureInstance = _gestureInstances++;\n  }\n\n  getConfig() {\n    return this.config;\n  }\n\n  onWaitingEnded(gesture) {}\n\n  removePendingGesture(id) {\n    delete this.pendingGestures[id];\n  }\n\n  addPendingGesture(gesture) {\n    this.pendingGestures[gesture.id] = gesture;\n  }\n\n  isGestureEnabledForEvent() {\n    return { success: true };\n  }\n\n  parseNativeEvent(nativeEvent) {\n    return nativeEvent;\n  }\n\n  get NativeGestureClass() {\n    throw new Error('Must override GestureHandler.NativeGestureClass');\n  }\n\n  updateHasCustomActivationCriteria(config) {\n    return true;\n  }\n\n  clearSelfAsPending = () => {\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.removePendingGesture(this.id);\n      }\n    }\n  };\n\n  updateGestureConfig({ enabled = true, ...props }) {\n    this.clearSelfAsPending();\n\n    this.config = ensureConfig({ enabled, ...props });\n    this._hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.addPendingGesture(this);\n      }\n    }\n\n    if (this.hammer) {\n      this.sync();\n    }\n    return this.config;\n  }\n\n  destroy = () => {\n    this.clearSelfAsPending();\n\n    if (this.hammer) {\n      this.hammer.stop();\n      this.hammer.destroy();\n    }\n    this.hammer = null;\n  };\n\n  isPointInView = ({ x, y }) => {\n    const rect = this.view.getBoundingClientRect();\n    const pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n    return pointerInside;\n  };\n\n  getState(type) {\n    return EventMap[type];\n  }\n\n  transformEventData(event) {\n    const { eventType, maxPointers: numberOfPointers } = event;\n    // const direction = DirectionMap[ev.direction];\n    const changedTouch = event.changedPointers[0];\n    const pointerInside = this.isPointInView({ x: changedTouch.clientX, y: changedTouch.clientY });\n\n    const state = this.getState(eventType);\n    if (state !== this.previousState) {\n      this.oldState = this.previousState;\n      this.previousState = state;\n    }\n\n    return {\n      nativeEvent: {\n        numberOfPointers,\n        state,\n        pointerInside,\n        ...this.transformNativeEvent(event),\n        // onHandlerStateChange only\n        handlerTag: this.handlerTag,\n        target: this.ref,\n        oldState: this.oldState,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  transformNativeEvent(event) {\n    return {};\n  }\n\n  sendEvent = nativeEvent => {\n    const {\n      onGestureHandlerStateChange: onHandlerStateChange,\n      onGestureHandlerEvent: onGestureEvent,\n    } = this.ref.props;\n\n    const event = this.transformEventData(nativeEvent);\n\n    // Reset the state for the next gesture\n    if (nativeEvent.isFinal) {\n      this.oldState = State.UNDETERMINED;\n      this.previousState = State.UNDETERMINED;\n    }\n\n    invokeNullableMethod('onGestureEvent', onGestureEvent, event);\n    invokeNullableMethod('onHandlerStateChange', onHandlerStateChange, event);\n  };\n\n  cancelPendingGestures(event) {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture && gesture.isGestureRunning) {\n        gesture.hasGestureFailed = true;\n        gesture.cancelEvent(event);\n      }\n    }\n  }\n\n  notifyPendingGestures() {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture) {\n        gesture.onWaitingEnded(this);\n      }\n    }\n  }\n\n  onGestureEnded(event) {\n    this.isGestureRunning = false;\n    this.cancelPendingGestures(event);\n  }\n\n  forceInvalidate(event) {\n    if (this.isGestureRunning) {\n      this.hasGestureFailed = true;\n      this.cancelEvent(event);\n    }\n  }\n\n  cancelEvent(event) {\n    this.notifyPendingGestures();\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_CANCEL,\n      isFinal: true,\n    });\n    this.onGestureEnded(event);\n  }\n\n  onRawEvent({ isFirst }) {\n    if (isFirst) {\n      this.hasGestureFailed = false;\n    }\n  }\n\n  setView(ref) {\n    if (ref == null) {\n      this.destroy();\n      this.view = null;\n      return;\n    }\n\n    this.ref = ref;\n\n    this.view = findNodeHandle(ref);\n    this.hammer = new Hammer.Manager(this.view);\n\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n\n    const { NativeGestureClass } = this;\n    const gesture = new NativeGestureClass(this.getHammerConfig());\n    this.hammer.add(gesture);\n\n    this.hammer.on('hammer.input', ev => {\n      if (!this.config.enabled) {\n        this.hasGestureFailed = false;\n        this.isGestureRunning = false;\n        return;\n      }\n\n      this.onRawEvent(ev);\n\n      // TODO: Bacon: Check against something other than null\n      // The isFirst value is not called when the first rotation is calculated.\n      if (this.initialRotation === null && ev.rotation !== 0) {\n        this.initialRotation = ev.rotation;\n      }\n      if (ev.isFinal) {\n        // in favor of a willFail otherwise the last frame of the gesture will be captured.\n        setTimeout(() => {\n          this.initialRotation = null;\n          this.hasGestureFailed = false;\n        });\n      }\n    });\n\n    this.setupEvents();\n    this.sync();\n  }\n\n  setupEvents() {\n    if (!this.isDiscrete) {\n      this.hammer.on(`${this.name}start`, event => this.onStart(event));\n      this.hammer.on(`${this.name}end ${this.name}cancel`, event => this.onGestureEnded(event));\n    }\n    this.hammer.on(this.name, ev => this.onGestureActivated(ev));\n  }\n\n  onStart({ deltaX, deltaY, rotation }) {\n    this.isGestureRunning = true;\n    this.__initialX = deltaX;\n    this.__initialY = deltaY;\n    this.initialRotation = rotation;\n  }\n\n  onGestureActivated(ev) {\n    this.sendEvent(ev);\n  }\n\n  onSuccess() {}\n\n  _getPendingGestures() {\n    if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n      // Get the list of gestures that this gesture is still waiting for.\n      // Use `=== false` in case a ref that isn't a gesture handler is used.\n      const stillWaiting = this.config.waitFor.filter(\n        ({ hasGestureFailed }) => hasGestureFailed === false\n      );\n      return stillWaiting;\n    }\n    return [];\n  }\n\n  getHammerConfig() {\n    const pointers =\n      this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n    return {\n      pointers,\n    };\n  }\n\n  sync = () => {\n    const gesture = this.hammer.get(this.name);\n    if (!gesture) return;\n\n    const enable = (recognizer, inputData) => {\n      if (!this.config.enabled) {\n        this.isGestureRunning = false;\n        this.hasGestureFailed = false;\n        return false;\n      }\n\n      // Prevent events before the system is ready.\n      if (!inputData || !recognizer.options || typeof inputData.maxPointers === 'undefined') {\n        return this.shouldEnableGestureOnSetup;\n      }\n\n      if (this.hasGestureFailed) {\n        return false;\n      }\n\n      if (!this.isDiscrete) {\n        if (this.isGestureRunning) {\n          return true;\n        }\n        // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n        // Only process if there are views to wait for.\n        this._stillWaiting = this._getPendingGestures();\n        // This gesture should continue waiting.\n        if (this._stillWaiting.length) {\n          // Check to see if one of the gestures you're waiting for has started.\n          // If it has then the gesture should fail.\n          for (const gesture of this._stillWaiting) {\n            // When the target gesture has started, this gesture must force fail.\n            if (!gesture.isDiscrete && gesture.isGestureRunning) {\n              this.hasGestureFailed = true;\n              this.isGestureRunning = false;\n              return false;\n            }\n          }\n          // This gesture shouldn't start until the others have finished.\n          return false;\n        }\n      }\n\n      // Use default behaviour\n      if (!this._hasCustomActivationCriteria) {\n        return true;\n      }\n\n      const deltaRotation =\n        this.initialRotation == null ? 0 : inputData.rotation - this.initialRotation;\n      const { success, failed } = this.isGestureEnabledForEvent(this.getConfig(), recognizer, {\n        ...inputData,\n        deltaRotation,\n      });\n\n      if (failed) {\n        this.simulateCancelEvent(inputData);\n        this.hasGestureFailed = true;\n      }\n      return success;\n    };\n\n    const params = this.getHammerConfig();\n    gesture.set({ ...params, enable });\n  };\n\n  simulateCancelEvent(inputData) {}\n}\n\n// Used for sending data to a callback or AnimatedEvent\nfunction invokeNullableMethod(name, method, event) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      // For use with reanimated's AnimatedEvent\n      if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n        const handler = method.__getHandler();\n        invokeNullableMethod(name, handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          const { argMapping } = method.__nodeConfig;\n          if (Array.isArray(argMapping)) {\n            for (const index in argMapping) {\n              const [key] = argMapping[index];\n              if (key in event.nativeEvent) {\n                method.__nodeConfig.argMapping[index] = [key, event.nativeEvent[key]];\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n// Validate the props\nfunction ensureConfig(config) {\n  const props = { ...config };\n\n  if ('minDist' in config) {\n    props.minDist = config.minDist;\n    props.minDistSq = props.minDist * props.minDist;\n  }\n  if ('minVelocity' in config) {\n    props.minVelocity = config.minVelocity;\n    props.minVelocitySq = props.minVelocity * props.minVelocity;\n  }\n  if ('maxDist' in config) {\n    props.maxDist = config.maxDist;\n    props.maxDistSq = config.maxDist * config.maxDist;\n  }\n  if ('waitFor' in config) {\n    props.waitFor = asArray(config.waitFor)\n      .map(({ _handlerTag }) => NodeManager.getHandler(_handlerTag))\n      .filter(v => v);\n  } else {\n    props.waitFor = null;\n  }\n\n  [\n    'minPointers',\n    'maxPointers',\n    'minDist',\n    'maxDist',\n    'maxDistSq',\n    'minVelocitySq',\n    'minDistSq',\n    'minVelocity',\n    'failOffsetXStart',\n    'failOffsetYStart',\n    'failOffsetXEnd',\n    'failOffsetYEnd',\n    'activeOffsetXStart',\n    'activeOffsetXEnd',\n    'activeOffsetYStart',\n    'activeOffsetYEnd',\n  ].forEach(prop => {\n    if (typeof props[prop] === 'undefined') {\n      props[prop] = Number.NaN;\n    }\n  });\n  return props;\n}\n\nfunction asArray(value) {\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nexport default GestureHandler;\n"]},"metadata":{},"sourceType":"script"}