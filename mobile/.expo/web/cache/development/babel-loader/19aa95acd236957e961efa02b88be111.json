{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = withDimensions;\nexports.isOrientationLandscape = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _hoistNonReactStatics = _interopRequireDefault(require(\"hoist-non-react-statics\"));\n\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/react-navigation-tabs/src/utils/withDimensions.tsx\";\n\nvar isOrientationLandscape = function isOrientationLandscape(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n  return width > height;\n};\n\nexports.isOrientationLandscape = isOrientationLandscape;\n\nfunction withDimensions(WrappedComponent) {\n  var EnhancedComponent = function (_React$Component) {\n    (0, _inherits2.default)(EnhancedComponent, _React$Component);\n\n    function EnhancedComponent(props) {\n      var _this;\n\n      (0, _classCallCheck2.default)(this, EnhancedComponent);\n      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(EnhancedComponent).call(this, props));\n\n      _this.handleOrientationChange = function (_ref2) {\n        var window = _ref2.window;\n        var width = window.width,\n            height = window.height;\n\n        _this.setState({\n          dimensions: {\n            width: width,\n            height: height\n          },\n          isLandscape: isOrientationLandscape({\n            width: width,\n            height: height\n          })\n        });\n      };\n\n      var _Dimensions$get = _reactNative.Dimensions.get('window'),\n          _width = _Dimensions$get.width,\n          _height = _Dimensions$get.height;\n\n      _this.state = {\n        dimensions: {\n          width: _width,\n          height: _height\n        },\n        isLandscape: isOrientationLandscape({\n          width: _width,\n          height: _height\n        })\n      };\n      return _this;\n    }\n\n    (0, _createClass2.default)(EnhancedComponent, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        _reactNative.Dimensions.addEventListener('change', this.handleOrientationChange);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        _reactNative.Dimensions.removeEventListener('change', this.handleOrientationChange);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        return React.createElement(WrappedComponent, (0, _extends2.default)({}, this.props, this.state, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          }\n        }));\n      }\n    }]);\n    return EnhancedComponent;\n  }(React.Component);\n\n  EnhancedComponent.displayName = \"withDimensions(\" + WrappedComponent.displayName + \")\";\n  return (0, _hoistNonReactStatics.default)(EnhancedComponent, WrappedComponent);\n}","map":{"version":3,"sources":["withDimensions.tsx"],"names":["isOrientationLandscape","width","height","EnhancedComponent","React","WrappedComponent","Dimensions","dimensions","isLandscape","window","hoistNonReactStatic"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;AAYO,IAAMA,sBAAsB,GAAtBA,SAAAA,sBAAAA,CAAyB,IAAzBA,EAAyB;AAAA,MAAGC,KAAH,GAAA,IAAA,CAAA,KAAA;AAAA,MAAUC,MAAV,GAAA,IAAA,CAAA,MAAA;AAAA,SACpCD,KAAK,GAD+B,MAAA;AAA/B,CAAA;;;;AAGQ,SAAA,cAAA,CAAA,gBAAA,EAEgE;AAAA,MACvEE,iBADuE,GAAA,UAAA,gBAAA,EAAA;AAAA,4BAAA,iBAAA,EAAA,gBAAA;;AAI3E,aAAA,iBAAA,CAAA,KAAA,EAA0B;AAAA,UAAA,KAAA;;AAAA,oCAAA,IAAA,EAAA,iBAAA;AACxB,MAAA,KAAA,GAAA,yCAAA,IAAA,EAAA,8BAAA,iBAAA,EAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA,CAAA;;AADwB,MAAA,KAAA,CAAA,uBAAA,GAkBA,UAAA,KAAA,EAAwC;AAArCM,YAAAA,MAAqC,GAAA,KAAA,CAArCA,MAAAA;AAAqC,YACxDR,KADwD,GACtCQ,MADsC,CAAA,KAAA;AAAA,YACjDP,MADiD,GACtCO,MADsC,CAAA,MAAA;;AAEhE,QAAA,KAAA,CAAA,QAAA,CAAc;AACZF,UAAAA,UAAU,EAAE;AAAEN,YAAAA,KAAK,EAAP,KAAA;AAASC,YAAAA,MAAM,EADf;AACA,WADA;AAEZM,UAAAA,WAAW,EAAER,sBAAsB,CAAC;AAAEC,YAAAA,KAAK,EAAP,KAAA;AAASC,YAAAA,MAAM,EAFrD;AAEsC,WAAD;AAFvB,SAAd;AApBwB,OAAA;;AAAA,UAAA,eAAA,GAGEI,wBAAAA,GAAAA,CAHF,QAGEA,CAHF;AAAA,UAGhBL,MAHgB,GAAA,eAAA,CAAA,KAAA;AAAA,UAGTC,OAHS,GAAA,eAAA,CAAA,MAAA;;AAIxB,MAAA,KAAA,CAAA,KAAA,GAAa;AACXK,QAAAA,UAAU,EAAE;AAAEN,UAAAA,KAAK,EAAP,MAAA;AAASC,UAAAA,MAAM,EADhB;AACC,SADD;AAEXM,QAAAA,WAAW,EAAER,sBAAsB,CAAC;AAAEC,UAAAA,KAAK,EAAP,MAAA;AAASC,UAAAA,MAAM,EAFrD;AAEsC,SAAD;AAFxB,OAAb;AAJwB,aAAA,KAAA;AAJiD;;AAAA,+BAAA,iBAAA,EAAA,CAAA;AAAA,MAAA,GAAA,EAAA,mBAAA;AAAA,MAAA,KAAA,EAAA,SAAA,iBAAA,GAcvD;AAClBI,gCAAAA,gBAAAA,CAAAA,QAAAA,EAAsC,KAAtCA,uBAAAA;AAfyE;AAAA,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,sBAAA;AAAA,MAAA,KAAA,EAAA,SAAA,oBAAA,GAkBpD;AACrBA,gCAAAA,mBAAAA,CAAAA,QAAAA,EAAyC,KAAzCA,uBAAAA;AAnByE;AAAA,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,QAAA;AAAA,MAAA,KAAA,EAAA,SAAA,MAAA,GA8BlE;AAEP,eAAO,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA,uBAAA,EAAA,EAAsB,KAAtB,KAAA,EAAsC,KAAtC,KAAA,EAAA;AAAA,UAAA,QAAA,EAAA;AAAA,YAAA,QAAA,EAAA,YAAA;AAAA,YAAA,UAAA,EAAP;AAAO;AAAA,SAAA,CAAA,CAAP;AAhCyE;AAAA,KAAA,CAAA;AAAA,WAAA,iBAAA;AAAA,GAAA,CAC7CF,KAAK,CADwC,SAAA,CAAA;;AACvED,EAAAA,iBADuE,CAAA,WACvEA,GADuE,oBAEpCE,gBAAgB,CAFoB,WAAA,GAAA,GACvEF;AAoCN,SAAOO,mCAAmB,iBAAnBA,EAAP,gBAAOA,CAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { Dimensions, ScaledSize } from 'react-native';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\n\ntype DimensionsType = {\n  width: number;\n  height: number;\n};\n\ntype InjectedProps = {\n  dimensions: DimensionsType;\n  isLandscape: boolean;\n};\n\nexport const isOrientationLandscape = ({ width, height }: DimensionsType) =>\n  width > height;\n\nexport default function withDimensions<Props extends InjectedProps>(\n  WrappedComponent: React.ComponentType<Props>\n): React.ComponentType<Pick<Props, Exclude<keyof Props, keyof InjectedProps>>> {\n  class EnhancedComponent extends React.Component {\n    static displayName = `withDimensions(${WrappedComponent.displayName})`;\n\n    constructor(props: Props) {\n      super(props);\n\n      const { width, height } = Dimensions.get('window');\n      this.state = {\n        dimensions: { width, height },\n        isLandscape: isOrientationLandscape({ width, height }),\n      };\n    }\n\n    componentDidMount() {\n      Dimensions.addEventListener('change', this.handleOrientationChange);\n    }\n\n    componentWillUnmount() {\n      Dimensions.removeEventListener('change', this.handleOrientationChange);\n    }\n\n    handleOrientationChange = ({ window }: { window: ScaledSize }) => {\n      const { width, height } = window;\n      this.setState({\n        dimensions: { width, height },\n        isLandscape: isOrientationLandscape({ width, height }),\n      });\n    };\n\n    render() {\n      // @ts-ignore\n      return <WrappedComponent {...this.props} {...this.state} />;\n    }\n  }\n\n  // @ts-ignore\n  return hoistNonReactStatic(EnhancedComponent, WrappedComponent);\n}\n"]},"metadata":{},"sourceType":"script"}