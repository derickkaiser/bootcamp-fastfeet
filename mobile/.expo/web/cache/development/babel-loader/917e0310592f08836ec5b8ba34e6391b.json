{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar NavigationActions = _interopRequireWildcard(require(\"../NavigationActions\"));\n\nvar StackActions = _interopRequireWildcard(require(\"./StackActions\"));\n\nvar _createConfigGetter = _interopRequireDefault(require(\"./createConfigGetter\"));\n\nvar _getScreenForRouteName = _interopRequireDefault(require(\"./getScreenForRouteName\"));\n\nvar _StateUtils = _interopRequireDefault(require(\"../StateUtils\"));\n\nvar _validateRouteConfigMap = _interopRequireDefault(require(\"./validateRouteConfigMap\"));\n\nvar _invariant = _interopRequireDefault(require(\"../utils/invariant\"));\n\nvar _KeyGenerator = require(\"./KeyGenerator\");\n\nvar _pathUtils = require(\"./pathUtils\");\n\nfunction behavesLikePushAction(action) {\n  return action.type === NavigationActions.NAVIGATE || action.type === StackActions.PUSH;\n}\n\nvar defaultActionCreators = function defaultActionCreators() {\n  return {};\n};\n\nfunction isResetToRootStack(action) {\n  return action.type === StackActions.RESET && action.key === null;\n}\n\nvar _default = function _default(routeConfigs) {\n  var stackConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  (0, _validateRouteConfigMap.default)(routeConfigs);\n  var childRouters = {};\n  var routeNames = Object.keys(routeConfigs);\n  routeNames.forEach(function (routeName) {\n    var routeConfig = routeConfigs[routeName];\n    var screen = routeConfig && routeConfig.screen ? routeConfig.screen : routeConfig;\n\n    if (screen && screen.router) {\n      childRouters[routeName] = screen.router;\n    } else {\n      childRouters[routeName] = null;\n    }\n  });\n  var initialRouteParams = stackConfig.initialRouteParams;\n  var getCustomActionCreators = stackConfig.getCustomActionCreators || defaultActionCreators;\n  var initialRouteName = stackConfig.initialRouteName || routeNames[0];\n  var initialChildRouter = childRouters[initialRouteName];\n\n  function getInitialState(action) {\n    var route = {};\n    var childRouter = childRouters[action.routeName];\n\n    if (behavesLikePushAction(action) && childRouter !== undefined) {\n      var childState = {};\n\n      if (childRouter !== null) {\n        var childAction = action.action || NavigationActions.init({\n          params: action.params\n        });\n        childState = childRouter.getStateForAction(childAction);\n      }\n\n      return {\n        key: 'StackRouterRoot',\n        isTransitioning: false,\n        index: 0,\n        routes: [(0, _objectSpread2.default)({\n          params: action.params\n        }, childState, {\n          key: action.key || (0, _KeyGenerator.generateKey)(),\n          routeName: action.routeName\n        })]\n      };\n    }\n\n    if (initialChildRouter) {\n      route = initialChildRouter.getStateForAction(NavigationActions.navigate({\n        routeName: initialRouteName,\n        params: initialRouteParams\n      }));\n    }\n\n    var params = (routeConfigs[initialRouteName].params || route.params || action.params || initialRouteParams) && (0, _objectSpread2.default)({}, routeConfigs[initialRouteName].params || {}, route.params || {}, action.params || {}, initialRouteParams || {});\n    var initialRouteKey = stackConfig.initialRouteKey;\n    route = (0, _objectSpread2.default)({}, route, params ? {\n      params: params\n    } : {}, {\n      routeName: initialRouteName,\n      key: action.key || initialRouteKey || (0, _KeyGenerator.generateKey)()\n    });\n    return {\n      key: 'StackRouterRoot',\n      isTransitioning: false,\n      index: 0,\n      routes: [route]\n    };\n  }\n\n  function getParamsForRouteAndAction(routeName, action) {\n    var routeConfig = routeConfigs[routeName];\n\n    if (routeConfig && routeConfig.params) {\n      return (0, _objectSpread2.default)({}, routeConfig.params, action.params);\n    } else {\n      return action.params;\n    }\n  }\n\n  var _createPathParser = (0, _pathUtils.createPathParser)(childRouters, routeConfigs, stackConfig),\n      getPathAndParamsForRoute = _createPathParser.getPathAndParamsForRoute,\n      _getActionForPathAndParams = _createPathParser.getActionForPathAndParams;\n\n  return {\n    childRouters: childRouters,\n    getComponentForState: function getComponentForState(state) {\n      var activeChildRoute = state.routes[state.index];\n      var routeName = activeChildRoute.routeName;\n\n      if (childRouters[routeName]) {\n        return childRouters[routeName].getComponentForState(activeChildRoute);\n      }\n\n      return (0, _getScreenForRouteName.default)(routeConfigs, routeName);\n    },\n    getComponentForRouteName: function getComponentForRouteName(routeName) {\n      return (0, _getScreenForRouteName.default)(routeConfigs, routeName);\n    },\n    getActionCreators: function getActionCreators(route, navStateKey) {\n      return (0, _objectSpread2.default)({}, getCustomActionCreators(route, navStateKey), {\n        pop: function pop(n, params) {\n          return StackActions.pop((0, _objectSpread2.default)({\n            n: n\n          }, params));\n        },\n        popToTop: function popToTop(params) {\n          return StackActions.popToTop(params);\n        },\n        push: function push(routeName, params, action) {\n          return StackActions.push({\n            routeName: routeName,\n            params: params,\n            action: action\n          });\n        },\n        replace: function replace(replaceWith, params, action, newKey) {\n          if (typeof replaceWith === 'string') {\n            return StackActions.replace({\n              routeName: replaceWith,\n              params: params,\n              action: action,\n              key: route.key,\n              newKey: newKey\n            });\n          }\n\n          (0, _invariant.default)(typeof replaceWith === 'object', 'Must replaceWith an object or a string');\n          (0, _invariant.default)(params == null, 'Params must not be provided to .replace() when specifying an object');\n          (0, _invariant.default)(action == null, 'Child action must not be provided to .replace() when specifying an object');\n          (0, _invariant.default)(newKey == null, 'Child action must not be provided to .replace() when specifying an object');\n          return StackActions.replace(replaceWith);\n        },\n        reset: function reset(actions, index) {\n          return StackActions.reset({\n            actions: actions,\n            index: index == null ? actions.length - 1 : index,\n            key: navStateKey\n          });\n        },\n        dismiss: function dismiss() {\n          return NavigationActions.back({\n            key: navStateKey\n          });\n        }\n      });\n    },\n    getStateForAction: function getStateForAction(action, state) {\n      if (!state) {\n        return getInitialState(action);\n      }\n\n      var activeChildRoute = state.routes[state.index];\n\n      if (!isResetToRootStack(action) && action.type !== NavigationActions.NAVIGATE) {\n        var activeChildRouter = childRouters[activeChildRoute.routeName];\n\n        if (activeChildRouter) {\n          var route = activeChildRouter.getStateForAction(action, activeChildRoute);\n\n          if (route !== null && route !== activeChildRoute) {\n            return _StateUtils.default.replaceAt(state, activeChildRoute.key, route, action.type === NavigationActions.SET_PARAMS);\n          }\n        }\n      } else if (action.type === NavigationActions.NAVIGATE) {\n        for (var _iterator = state.routes.slice().reverse(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\" : \"@@iterator\"]();;) {\n          var _ref;\n\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref = _i.value;\n          }\n\n          var _childRoute = _ref;\n          var childRouter = childRouters[_childRoute.routeName];\n          var childAction = action.routeName === _childRoute.routeName && action.action ? action.action : action;\n\n          if (childRouter) {\n            var nextRouteState = childRouter.getStateForAction(childAction, _childRoute);\n\n            if (nextRouteState === null || nextRouteState !== _childRoute) {\n              var newState = _StateUtils.default.replaceAndPrune(state, nextRouteState ? nextRouteState.key : _childRoute.key, nextRouteState ? nextRouteState : _childRoute);\n\n              return (0, _objectSpread2.default)({}, newState, {\n                isTransitioning: state.index !== newState.index ? action.immediate !== true : state.isTransitioning\n              });\n            }\n          }\n        }\n      }\n\n      if (behavesLikePushAction(action) && childRouters[action.routeName] !== undefined) {\n        var _childRouter = childRouters[action.routeName];\n\n        var _route;\n\n        (0, _invariant.default)(action.type !== StackActions.PUSH || action.key == null, 'StackRouter does not support key on the push action');\n        var lastRouteIndex = state.routes.findIndex(function (r) {\n          if (action.key) {\n            return r.key === action.key;\n          } else {\n            return r.routeName === action.routeName;\n          }\n        });\n\n        if (action.type !== StackActions.PUSH && lastRouteIndex !== -1) {\n          if (state.index === lastRouteIndex && !action.params) {\n            return null;\n          }\n\n          var routes = state.routes.slice(0, lastRouteIndex + 1);\n\n          if (action.params) {\n            var _route2 = state.routes[lastRouteIndex];\n            routes[lastRouteIndex] = (0, _objectSpread2.default)({}, _route2, {\n              params: (0, _objectSpread2.default)({}, _route2.params, action.params)\n            });\n          }\n\n          return (0, _objectSpread2.default)({}, state, {\n            isTransitioning: state.index !== lastRouteIndex ? action.immediate !== true : state.isTransitioning,\n            index: lastRouteIndex,\n            routes: routes\n          });\n        }\n\n        if (_childRouter) {\n          var _childAction = action.action || NavigationActions.init({\n            params: getParamsForRouteAndAction(action.routeName, action)\n          });\n\n          _route = (0, _objectSpread2.default)({\n            params: getParamsForRouteAndAction(action.routeName, action)\n          }, _childRouter.getStateForAction(_childAction), {\n            routeName: action.routeName,\n            key: action.key || (0, _KeyGenerator.generateKey)()\n          });\n        } else {\n          _route = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            routeName: action.routeName,\n            key: action.key || (0, _KeyGenerator.generateKey)()\n          };\n        }\n\n        return (0, _objectSpread2.default)({}, _StateUtils.default.push(state, _route), {\n          isTransitioning: action.immediate !== true\n        });\n      } else if (action.type === StackActions.PUSH && childRouters[action.routeName] === undefined) {\n        return state;\n      }\n\n      if (behavesLikePushAction(action)) {\n        var childRouterNames = Object.keys(childRouters);\n\n        for (var i = 0; i < childRouterNames.length; i++) {\n          var childRouterName = childRouterNames[i];\n          var _childRouter2 = childRouters[childRouterName];\n\n          if (_childRouter2) {\n            var initChildRoute = _childRouter2.getStateForAction(NavigationActions.init());\n\n            var navigatedChildRoute = _childRouter2.getStateForAction(action, initChildRoute);\n\n            var routeToPush = null;\n\n            if (navigatedChildRoute === null) {\n              routeToPush = initChildRoute;\n            } else if (navigatedChildRoute !== initChildRoute) {\n              routeToPush = navigatedChildRoute;\n            }\n\n            if (routeToPush) {\n              var _route3 = (0, _objectSpread2.default)({}, routeToPush, {\n                routeName: childRouterName,\n                key: action.key || (0, _KeyGenerator.generateKey)()\n              });\n\n              return (0, _objectSpread2.default)({}, _StateUtils.default.push(state, _route3), {\n                isTransitioning: action.immediate !== true\n              });\n            }\n          }\n        }\n      }\n\n      if (action.type === StackActions.POP_TO_TOP) {\n        if (action.key && state.key !== action.key) {\n          return state;\n        }\n\n        if (state.index > 0) {\n          return (0, _objectSpread2.default)({}, state, {\n            isTransitioning: action.immediate !== true,\n            index: 0,\n            routes: [state.routes[0]]\n          });\n        }\n\n        return state;\n      }\n\n      if (action.type === StackActions.REPLACE) {\n        var routeIndex;\n\n        if (action.key === undefined && state.routes.length) {\n          routeIndex = state.routes.length - 1;\n        } else {\n          routeIndex = state.routes.findIndex(function (r) {\n            return r.key === action.key;\n          });\n        }\n\n        if (routeIndex !== -1) {\n          var _childRouter3 = childRouters[action.routeName];\n          var childState = {};\n\n          if (_childRouter3) {\n            var _childAction2 = action.action || NavigationActions.init({\n              params: getParamsForRouteAndAction(action.routeName, action)\n            });\n\n            childState = _childRouter3.getStateForAction(_childAction2);\n          }\n\n          var _routes = (0, _toConsumableArray2.default)(state.routes);\n\n          _routes[routeIndex] = (0, _objectSpread2.default)({\n            params: getParamsForRouteAndAction(action.routeName, action)\n          }, childState, {\n            routeName: action.routeName,\n            key: action.newKey || (0, _KeyGenerator.generateKey)()\n          });\n          return (0, _objectSpread2.default)({}, state, {\n            routes: _routes\n          });\n        }\n      }\n\n      if (action.type === StackActions.COMPLETE_TRANSITION && (action.key == null || action.key === state.key) && action.toChildKey === state.routes[state.index].key && state.isTransitioning) {\n        return (0, _objectSpread2.default)({}, state, {\n          isTransitioning: false\n        });\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        var key = action.key;\n        var lastRoute = state.routes.find(function (route) {\n          return route.key === key;\n        });\n\n        if (lastRoute) {\n          var params = (0, _objectSpread2.default)({}, lastRoute.params, action.params);\n\n          var _routes2 = (0, _toConsumableArray2.default)(state.routes);\n\n          _routes2[state.routes.indexOf(lastRoute)] = (0, _objectSpread2.default)({}, lastRoute, {\n            params: params\n          });\n          return (0, _objectSpread2.default)({}, state, {\n            routes: _routes2\n          });\n        }\n      }\n\n      if (action.type === StackActions.RESET) {\n        if (action.key != null && action.key != state.key) {\n          return state;\n        }\n\n        var newStackActions = action.actions;\n        return (0, _objectSpread2.default)({}, state, {\n          routes: newStackActions.map(function (newStackAction) {\n            var router = childRouters[newStackAction.routeName];\n            var childState = {};\n\n            if (router) {\n              var _childAction3 = newStackAction.action || NavigationActions.init({\n                params: getParamsForRouteAndAction(newStackAction.routeName, newStackAction)\n              });\n\n              childState = router.getStateForAction(_childAction3);\n            }\n\n            return (0, _objectSpread2.default)({\n              params: getParamsForRouteAndAction(newStackAction.routeName, newStackAction)\n            }, childState, {\n              routeName: newStackAction.routeName,\n              key: newStackAction.key || (0, _KeyGenerator.generateKey)()\n            });\n          }),\n          index: action.index\n        });\n      }\n\n      if (action.type === NavigationActions.BACK || action.type === StackActions.POP) {\n        var _key = action.key,\n            n = action.n,\n            immediate = action.immediate;\n        var backRouteIndex = state.index;\n\n        if (action.type === StackActions.POP && n != null) {\n          backRouteIndex = Math.max(1, state.index - n + 1);\n        } else if (_key) {\n          var backRoute = state.routes.find(function (route) {\n            return route.key === _key;\n          });\n          backRouteIndex = state.routes.indexOf(backRoute);\n        }\n\n        if (backRouteIndex > 0) {\n          return (0, _objectSpread2.default)({}, state, {\n            routes: state.routes.slice(0, backRouteIndex),\n            index: backRouteIndex - 1,\n            isTransitioning: immediate !== true\n          });\n        }\n      }\n\n      var keyIndex = action.key ? _StateUtils.default.indexOf(state, action.key) : -1;\n\n      for (var _iterator2 = state.routes.slice().reverse(), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === \"function\" ? typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\" : \"@@iterator\"]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var _childRoute3 = _ref2;\n\n        if (_childRoute3.key === activeChildRoute.key) {\n          continue;\n        }\n\n        if (keyIndex >= 0 && _childRoute3.key !== action.key) {\n          continue;\n        }\n\n        var _childRouter5 = childRouters[_childRoute3.routeName];\n\n        if (_childRouter5) {\n          var _route4 = _childRouter5.getStateForAction(action, _childRoute3);\n\n          if (_route4 === null) {\n            return state;\n          } else if (_route4 && _route4 !== _childRoute3) {\n            return _StateUtils.default.replaceAt(state, _childRoute3.key, _route4, action.preserveFocus || action.type.includes('DRAWER'));\n          }\n        }\n      }\n\n      return state;\n    },\n    getPathAndParamsForState: function getPathAndParamsForState(state) {\n      var route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n    getActionForPathAndParams: function getActionForPathAndParams(path, params) {\n      return _getActionForPathAndParams(path, params);\n    },\n    getScreenOptions: (0, _createConfigGetter.default)(routeConfigs, stackConfig.defaultNavigationOptions)\n  };\n};\n\nexports.default = _default;","map":{"version":3,"sources":["StackRouter.js"],"names":["action","NavigationActions","StackActions","defaultActionCreators","stackConfig","validateRouteConfigMap","childRouters","routeNames","Object","routeConfig","routeConfigs","screen","initialRouteParams","getCustomActionCreators","initialRouteName","initialChildRouter","route","childRouter","behavesLikePushAction","childState","childAction","params","key","isTransitioning","index","routes","routeName","initialRouteKey","getPathAndParamsForRoute","getActionForPathAndParams","createPathParser","getComponentForState","activeChildRoute","state","getScreenForRouteName","getComponentForRouteName","getActionCreators","pop","n","popToTop","push","replace","newKey","invariant","reset","actions","dismiss","getStateForAction","getInitialState","isResetToRootStack","activeChildRouter","StateUtils","childRoute","nextRouteState","newState","lastRouteIndex","r","getParamsForRouteAndAction","childRouterNames","i","childRouterName","initChildRoute","navigatedChildRoute","routeToPush","routeIndex","lastRoute","newStackActions","router","newStackAction","immediate","backRouteIndex","Math","backRoute","keyIndex","getPathAndParamsForState","getScreenOptions","createConfigGetter"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,SAAA,qBAAA,CAAA,MAAA,EAAuC;AACrC,SACEA,MAAM,CAANA,IAAAA,KAAgBC,iBAAiB,CAAjCD,QAAAA,IACAA,MAAM,CAANA,IAAAA,KAAgBE,YAAY,CAF9B,IAAA;AAMF;;AAAA,IAAMC,qBAAqB,GAArBA,SAAAA,qBAAAA,GAAwB;AAAA,SAAA,EAAA;AAA9B,CAAA;;AAEA,SAAA,kBAAA,CAAA,MAAA,EAAoC;AAClC,SAAOH,MAAM,CAANA,IAAAA,KAAgBE,YAAY,CAA5BF,KAAAA,IAAsCA,MAAM,CAANA,GAAAA,KAA7C,IAAA;AAGF;;eAAe,kBAAA,YAAA,EAAoC;AAArBI,MAAAA,WAAqB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAP,EAAdA;AAE5BC,uCAAAA,YAAAA;AAEA,MAAMC,YAAY,GAAlB,EAAA;AACA,MAAMC,UAAU,GAAGC,MAAM,CAANA,IAAAA,CAAnB,YAAmBA,CAAnB;AAGAD,EAAAA,UAAU,CAAVA,OAAAA,CAAmB,UAAA,SAAA,EAAa;AAI9B,QAAME,WAAW,GAAGC,YAAY,CAAhC,SAAgC,CAAhC;AACA,QAAMC,MAAM,GACVF,WAAW,IAAIA,WAAW,CAA1BA,MAAAA,GAAoCA,WAAW,CAA/CA,MAAAA,GADF,WAAA;;AAEA,QAAIE,MAAM,IAAIA,MAAM,CAApB,MAAA,EAA6B;AAE3BL,MAAAA,YAAY,CAAZA,SAAY,CAAZA,GAA0BK,MAAM,CAAhCL,MAAAA;AAFF,KAAA,MAGO;AAELA,MAAAA,YAAY,CAAZA,SAAY,CAAZA,GAAAA,IAAAA;AAEH;AAdDC,GAAAA;AARiD,MAwBzCK,kBAxByC,GAwBlBR,WAxBkB,CAAA,kBAAA;AAyBjD,MAAMS,uBAAuB,GAC3BT,WAAW,CAAXA,uBAAAA,IADF,qBAAA;AAGA,MAAMU,gBAAgB,GAAGV,WAAW,CAAXA,gBAAAA,IAAgCG,UAAU,CAAnE,CAAmE,CAAnE;AAEA,MAAMQ,kBAAkB,GAAGT,YAAY,CAAvC,gBAAuC,CAAvC;;AAEA,WAAA,eAAA,CAAA,MAAA,EAAiC;AAC/B,QAAIU,KAAK,GAAT,EAAA;AACA,QAAMC,WAAW,GAAGX,YAAY,CAACN,MAAM,CAAvC,SAAgC,CAAhC;;AAGA,QAAIkB,qBAAqB,CAArBA,MAAqB,CAArBA,IAAiCD,WAAW,KAAhD,SAAA,EAAgE;AAC9D,UAAIE,UAAU,GAAd,EAAA;;AAEA,UAAIF,WAAW,KAAf,IAAA,EAA0B;AACxB,YAAMG,WAAW,GACfpB,MAAM,CAANA,MAAAA,IAAiBC,iBAAiB,CAAjBA,IAAAA,CAAuB;AAAEoB,UAAAA,MAAM,EAAErB,MAAM,CAD1D;AAC0C,SAAvBC,CADnB;AAEAkB,QAAAA,UAAU,GAAGF,WAAW,CAAXA,iBAAAA,CAAbE,WAAaF,CAAbE;AAGF;;AAAA,aAAO;AACLG,QAAAA,GAAG,EADE,iBAAA;AAELC,QAAAA,eAAe,EAFV,KAAA;AAGLC,QAAAA,KAAK,EAHA,CAAA;AAILC,QAAAA,MAAM,EAAE,CAAA,4BAAA;AAEJJ,UAAAA,MAAM,EAAErB,MAAM,CAFV;AAAA,SAAA,EAAA,UAAA,EAAA;AAIJsB,UAAAA,GAAG,EAAEtB,MAAM,CAANA,GAAAA,IAJD,gCAAA;AAKJ0B,UAAAA,SAAS,EAAE1B,MAAM,CATvB;AAIU,SAAA,CAAA;AAJH,OAAP;AAeF;;AAAA,QAAA,kBAAA,EAAwB;AACtBgB,MAAAA,KAAK,GAAGD,kBAAkB,CAAlBA,iBAAAA,CACNd,iBAAiB,CAAjBA,QAAAA,CAA2B;AACzByB,QAAAA,SAAS,EADgB,gBAAA;AAEzBL,QAAAA,MAAM,EAHVL;AAC6B,OAA3Bf,CADMc,CAARC;AAOF;;AAAA,QAAMK,MAAM,GAAG,CAACX,YAAY,CAAZA,gBAAY,CAAZA,CAAAA,MAAAA,IACdM,KAAK,CADSN,MAAAA,IAEdV,MAAM,CAFQU,MAAAA,IAAD,kBAAA,KAAA,4BAAA,EAAA,EAITA,YAAY,CAAZA,gBAAY,CAAZA,CAAAA,MAAAA,IAJS,EAAA,EAKTM,KAAK,CAALA,MAAAA,IALS,EAAA,EAMThB,MAAM,CAANA,MAAAA,IANS,EAAA,EAOTY,kBAAkB,IAPxB,EAAe,CAAf;AArC+B,QA8CvBe,eA9CuB,GA8CHvB,WA9CG,CAAA,eAAA;AA+C/BY,IAAAA,KAAK,GAAA,4BAAA,EAAA,EAAA,KAAA,EAECK,MAAM,GAAG;AAAEA,MAAAA,MAAM,EAAX;AAAG,KAAH,GAFP,EAAA,EAAA;AAGHK,MAAAA,SAAS,EAHN,gBAAA;AAIHJ,MAAAA,GAAG,EAAEtB,MAAM,CAANA,GAAAA,IAAe2B,eAAf3B,IAJPgB;AAAK,KAAA,CAALA;AAMA,WAAO;AACLM,MAAAA,GAAG,EADE,iBAAA;AAELC,MAAAA,eAAe,EAFV,KAAA;AAGLC,MAAAA,KAAK,EAHA,CAAA;AAILC,MAAAA,MAAM,EAAE,CAJV,KAIU;AAJH,KAAP;AAQF;;AAAA,WAAA,0BAAA,CAAA,SAAA,EAAA,MAAA,EAAuD;AACrD,QAAIhB,WAAW,GAAGC,YAAY,CAA9B,SAA8B,CAA9B;;AACA,QAAID,WAAW,IAAIA,WAAW,CAA9B,MAAA,EAAuC;AACrC,aAAA,4BAAA,EAAA,EAAYA,WAAW,CAAvB,MAAA,EAAmCT,MAAM,CAAzC,MAAA,CAAA;AADF,KAAA,MAEO;AACL,aAAOA,MAAM,CAAb,MAAA;AAEH;AApGgD;;AAAA,MAAA,iBAAA,GAyG7C8B,iCAAgB,YAAhBA,EAAgB,YAAhBA,EAzG6C,WAyG7CA,CAzG6C;AAAA,MAuG/CF,wBAvG+C,GAAA,iBAAA,CAAA,wBAAA;AAAA,MAwG/CC,0BAxG+C,GAAA,iBAAA,CAAA,yBAAA;;AA2GjD,SAAO;AACLvB,IAAAA,YAAY,EADP,YAAA;AAGLyB,IAAAA,oBAHK,EAAA,SAAA,oBAAA,CAAA,KAAA,EAGuB;AAC1B,UAAMC,gBAAgB,GAAGC,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAA3C,KAAyBA,CAAzB;AAD0B,UAElBP,SAFkB,GAEJM,gBAFI,CAAA,SAAA;;AAG1B,UAAI1B,YAAY,CAAhB,SAAgB,CAAhB,EAA6B;AAC3B,eAAOA,YAAY,CAAZA,SAAY,CAAZA,CAAAA,oBAAAA,CAAP,gBAAOA,CAAP;AAEF;;AAAA,aAAO4B,oCAAqB,YAArBA,EAAP,SAAOA,CAAP;AATG,KAAA;AAYLC,IAAAA,wBAZK,EAAA,SAAA,wBAAA,CAAA,SAAA,EAY+B;AAClC,aAAOD,oCAAqB,YAArBA,EAAP,SAAOA,CAAP;AAbG,KAAA;AAgBLE,IAAAA,iBAhBK,EAAA,SAAA,iBAAA,CAAA,KAAA,EAAA,WAAA,EAgBiC;AACpC,aAAA,4BAAA,EAAA,EACKvB,uBAAuB,CAAA,KAAA,EAD5B,WAC4B,CAD5B,EAAA;AAEEwB,QAAAA,GAAG,EAAE,SAAA,GAAA,CAAA,CAAA,EAAA,MAAA,EAAA;AAAA,iBACHnC,YAAY,CAAZA,GAAAA,CAAAA,4BAAAA;AACEoC,YAAAA,CAAC,EADHpC;AAAAA,WAAAA,EADG,MACHA,CAAAA,CADG;AAFP,SAAA;AAOEqC,QAAAA,QAAQ,EAAE,SAAA,QAAA,CAAA,MAAA,EAAM;AAAA,iBAAIrC,YAAY,CAAZA,QAAAA,CAAJ,MAAIA,CAAJ;AAPlB,SAAA;AAQEsC,QAAAA,IAAI,EAAE,SAAA,IAAA,CAAA,SAAA,EAAA,MAAA,EAAA,MAAA,EAAA;AAAA,iBACJtC,YAAY,CAAZA,IAAAA,CAAkB;AAChBwB,YAAAA,SAAS,EADO,SAAA;AAEhBL,YAAAA,MAAM,EAFU,MAAA;AAGhBrB,YAAAA,MAAM,EAJJ;AACc,WAAlBE,CADI;AARR,SAAA;AAcEuC,QAAAA,OAAO,EAAE,SAAA,OAAA,CAAA,WAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAyC;AAChD,cAAI,OAAA,WAAA,KAAJ,QAAA,EAAqC;AACnC,mBAAOvC,YAAY,CAAZA,OAAAA,CAAqB;AAC1BwB,cAAAA,SAAS,EADiB,WAAA;AAE1BL,cAAAA,MAAM,EAFoB,MAAA;AAG1BrB,cAAAA,MAAM,EAHoB,MAAA;AAI1BsB,cAAAA,GAAG,EAAEN,KAAK,CAJgB,GAAA;AAK1B0B,cAAAA,MAAM,EALR;AAA4B,aAArBxC,CAAP;AAQFyC;;AAAAA,kCACE,OAAA,WAAA,KADO,QAATA,EAAAA,wCAAAA;AAIAA,kCACEtB,MAAM,IADC,IAATsB,EAAAA,qEAAAA;AAIAA,kCACE3C,MAAM,IADC,IAAT2C,EAAAA,2EAAAA;AAIAA,kCACED,MAAM,IADC,IAATC,EAAAA,2EAAAA;AAIA,iBAAOzC,YAAY,CAAZA,OAAAA,CAAP,WAAOA,CAAP;AAxCJ,SAAA;AA0CE0C,QAAAA,KAAK,EAAE,SAAA,KAAA,CAAA,OAAA,EAAA,KAAA,EAAA;AAAA,iBACL1C,YAAY,CAAZA,KAAAA,CAAmB;AACjB2C,YAAAA,OAAO,EADU,OAAA;AAEjBrB,YAAAA,KAAK,EAAEA,KAAK,IAALA,IAAAA,GAAgBqB,OAAO,CAAPA,MAAAA,GAAhBrB,CAAAA,GAFU,KAAA;AAGjBF,YAAAA,GAAG,EAJA;AACc,WAAnBpB,CADK;AA1CT,SAAA;AAgDE4C,QAAAA,OAAO,EAAE,SAAA,OAAA,GAAA;AAAA,iBACP7C,iBAAiB,CAAjBA,IAAAA,CAAuB;AACrBqB,YAAAA,GAAG,EAFE;AACgB,WAAvBrB,CADO;AAhDX;AAAA,OAAA,CAAA;AAjBG,KAAA;AAwEL8C,IAAAA,iBAxEK,EAAA,SAAA,iBAAA,CAAA,MAAA,EAAA,KAAA,EAwE4B;AAE/B,UAAI,CAAJ,KAAA,EAAY;AACV,eAAOC,eAAe,CAAtB,MAAsB,CAAtB;AAGF;;AAAA,UAAMhB,gBAAgB,GAAGC,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAA3C,KAAyBA,CAAzB;;AAEA,UACE,CAACgB,kBAAkB,CAAnB,MAAmB,CAAnB,IACAjD,MAAM,CAANA,IAAAA,KAAgBC,iBAAiB,CAFnC,QAAA,EAGE;AAEA,YAAMiD,iBAAiB,GAAG5C,YAAY,CAAC0B,gBAAgB,CAAvD,SAAsC,CAAtC;;AACA,YAAA,iBAAA,EAAuB;AACrB,cAAMhB,KAAK,GAAGkC,iBAAiB,CAAjBA,iBAAAA,CAAAA,MAAAA,EAAd,gBAAcA,CAAd;;AAIA,cAAIlC,KAAK,KAALA,IAAAA,IAAkBA,KAAK,KAA3B,gBAAA,EAAkD;AAChD,mBAAOmC,oBAAAA,SAAAA,CAAAA,KAAAA,EAELnB,gBAAgB,CAFXmB,GAAAA,EAAAA,KAAAA,EAKLnD,MAAM,CAANA,IAAAA,KAAgBC,iBAAiB,CALnC,UAAOkD,CAAP;AAQH;AACF;AArBD,OAAA,MAqBO,IAAInD,MAAM,CAANA,IAAAA,KAAgBC,iBAAiB,CAArC,QAAA,EAAgD;AAIrD,aAAA,IAAA,SAAA,GAAuBgC,KAAK,CAALA,MAAAA,CAAAA,KAAAA,GAAvB,OAAuBA,EAAvB,EAAA,QAAA,GAAA,KAAA,CAAA,OAAA,CAAA,SAAA,CAAA,EAAA,EAAA,GAAA,CAAA,EAAA,SAAA,GAAA,QAAA,GAAA,SAAA,GAAA,SAAA,CAAA,OAAA,MAAA,KAAA,UAAA,kCAAA,MAAA,CAAA,QAAA,kBAAA,YAAA,CAAA,EAAA,IAAuD;AAAA,cAAA,IAAA;;AAAA,cAAA,QAAA,EAAA;AAAA,gBAAA,EAAA,IAAA,SAAA,CAAA,MAAA,EAAA;AAAA,YAAA,IAAA,GAAA,SAAA,CAAA,EAAA,EAAA,CAAA;AAAA,WAAA,MAAA;AAAA,YAAA,EAAA,GAAA,SAAA,CAAA,IAAA,EAAA;AAAA,gBAAA,EAAA,CAAA,IAAA,EAAA;AAAA,YAAA,IAAA,GAAA,EAAA,CAAA,KAAA;AAA9CmB;;AAAAA,cAAAA,WAA8C,GAAA,IAA9CA;AACP,cAAInC,WAAW,GAAGX,YAAY,CAAC8C,WAAU,CAAzC,SAA8B,CAA9B;AACA,cAAIhC,WAAW,GACbpB,MAAM,CAANA,SAAAA,KAAqBoD,WAAU,CAA/BpD,SAAAA,IAA6CA,MAAM,CAAnDA,MAAAA,GACIA,MAAM,CADVA,MAAAA,GADF,MAAA;;AAKA,cAAA,WAAA,EAAiB;AACf,gBAAMqD,cAAc,GAAGpC,WAAW,CAAXA,iBAAAA,CAAAA,WAAAA,EAAvB,WAAuBA,CAAvB;;AAKA,gBAAIoC,cAAc,KAAdA,IAAAA,IAA2BA,cAAc,KAA7C,WAAA,EAA8D;AAC5D,kBAAMC,QAAQ,GAAGH,oBAAAA,eAAAA,CAAAA,KAAAA,EAEfE,cAAc,GAAGA,cAAc,CAAjB,GAAA,GAAwBD,WAAU,CAFjCD,GAAAA,EAGfE,cAAc,GAAA,cAAA,GAHhB,WAAiBF,CAAjB;;AAKA,qBAAA,4BAAA,EAAA,EAAA,QAAA,EAAA;AAEE5B,gBAAAA,eAAe,EACbU,KAAK,CAALA,KAAAA,KAAgBqB,QAAQ,CAAxBrB,KAAAA,GACIjC,MAAM,CAANA,SAAAA,KADJiC,IAAAA,GAEIA,KAAK,CALb;AAAA,eAAA,CAAA;AAQH;AACF;AACF;AAID;;AAAA,UACEf,qBAAqB,CAArBA,MAAqB,CAArBA,IACAZ,YAAY,CAACN,MAAM,CAAnBM,SAAY,CAAZA,KAFF,SAAA,EAGE;AACA,YAAMW,YAAW,GAAGX,YAAY,CAACN,MAAM,CAAvC,SAAgC,CAAhC;;AACA,YAAA,MAAA;;AAEA2C,gCACE3C,MAAM,CAANA,IAAAA,KAAgBE,YAAY,CAA5BF,IAAAA,IAAqCA,MAAM,CAANA,GAAAA,IAD9B,IAAT2C,EAAAA,qDAAAA;AAOA,YAAMY,cAAc,GAAGtB,KAAK,CAALA,MAAAA,CAAAA,SAAAA,CAAuB,UAAA,CAAA,EAAK;AACjD,cAAIjC,MAAM,CAAV,GAAA,EAAgB;AACd,mBAAOwD,CAAC,CAADA,GAAAA,KAAUxD,MAAM,CAAvB,GAAA;AADF,WAAA,MAEO;AACL,mBAAOwD,CAAC,CAADA,SAAAA,KAAgBxD,MAAM,CAA7B,SAAA;AAEH;AAND,SAAuBiC,CAAvB;;AASA,YAAIjC,MAAM,CAANA,IAAAA,KAAgBE,YAAY,CAA5BF,IAAAA,IAAqCuD,cAAc,KAAK,CAA5D,CAAA,EAAgE;AAE9D,cAAItB,KAAK,CAALA,KAAAA,KAAAA,cAAAA,IAAkC,CAACjC,MAAM,CAA7C,MAAA,EAAsD;AACpD,mBAAA,IAAA;AAIF;;AAAA,cAAMyB,MAAM,GAAGQ,KAAK,CAALA,MAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAsBsB,cAAc,GAAnD,CAAetB,CAAf;;AAGA,cAAIjC,MAAM,CAAV,MAAA,EAAmB;AACjB,gBAAMgB,OAAK,GAAGiB,KAAK,CAALA,MAAAA,CAAd,cAAcA,CAAd;AACAR,YAAAA,MAAM,CAANA,cAAM,CAANA,GAAAA,4BAAAA,EAAAA,EAAAA,OAAAA,EAAAA;AAEEJ,cAAAA,MAAM,EAAA,4BAAA,EAAA,EACDL,OAAK,CADJ,MAAA,EAEDhB,MAAM,CAJbyB,MAEQ;AAFRA,aAAAA,CAAAA;AASF;;AAAA,iBAAA,4BAAA,EAAA,EAAA,KAAA,EAAA;AAEEF,YAAAA,eAAe,EACbU,KAAK,CAALA,KAAAA,KAAAA,cAAAA,GACIjC,MAAM,CAANA,SAAAA,KADJiC,IAAAA,GAEIA,KAAK,CALb,eAAA;AAMET,YAAAA,KAAK,EANP,cAAA;AAOEC,YAAAA,MAAM,EAPR;AAAA,WAAA,CAAA;AAWF;;AAAA,YAAA,YAAA,EAAiB;AAEf,cAAML,YAAW,GACfpB,MAAM,CAANA,MAAAA,IACAC,iBAAiB,CAAjBA,IAAAA,CAAuB;AACrBoB,YAAAA,MAAM,EAAEoC,0BAA0B,CAACzD,MAAM,CAAP,SAAA,EAHtC,MAGsC;AADb,WAAvBC,CAFF;;AAKAe,UAAAA,MAAK,GAAA,4BAAA;AACHK,YAAAA,MAAM,EAAEoC,0BAA0B,CAACzD,MAAM,CAAP,SAAA,EAD/B,MAC+B;AAD/B,WAAA,EAKAiB,YAAW,CAAXA,iBAAAA,CALA,YAKAA,CALA,EAAA;AAMHS,YAAAA,SAAS,EAAE1B,MAAM,CANd,SAAA;AAOHsB,YAAAA,GAAG,EAAEtB,MAAM,CAANA,GAAAA,IAPPgB;AAAK,WAAA,CAALA;AAPF,SAAA,MAgBO;AAELA,UAAAA,MAAK,GAAG;AACNK,YAAAA,MAAM,EAAEoC,0BAA0B,CAACzD,MAAM,CAAP,SAAA,EAD5B,MAC4B,CAD5B;AAEN0B,YAAAA,SAAS,EAAE1B,MAAM,CAFX,SAAA;AAGNsB,YAAAA,GAAG,EAAEtB,MAAM,CAANA,GAAAA,IAHPgB;AAAQ,WAARA;AAMF;;AAAA,eAAA,4BAAA,EAAA,EACKmC,oBAAAA,IAAAA,CAAAA,KAAAA,EADL,MACKA,CADL,EAAA;AAEE5B,UAAAA,eAAe,EAAEvB,MAAM,CAANA,SAAAA,KAFnB;AAAA,SAAA,CAAA;AA/EF,OAAA,MAmFO,IACLA,MAAM,CAANA,IAAAA,KAAgBE,YAAY,CAA5BF,IAAAA,IACAM,YAAY,CAACN,MAAM,CAAnBM,SAAY,CAAZA,KAFK,SAAA,EAGL;AAEA,eAAA,KAAA;AAIF;;AAAA,UAAIY,qBAAqB,CAAzB,MAAyB,CAAzB,EAAmC;AACjC,YAAMwC,gBAAgB,GAAGlD,MAAM,CAANA,IAAAA,CAAzB,YAAyBA,CAAzB;;AACA,aAAK,IAAImD,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGD,gBAAgB,CAApC,MAAA,EAA6CC,CAA7C,EAAA,EAAkD;AAChD,cAAMC,eAAe,GAAGF,gBAAgB,CAAxC,CAAwC,CAAxC;AACA,cAAMzC,aAAW,GAAGX,YAAY,CAAhC,eAAgC,CAAhC;;AACA,cAAA,aAAA,EAAiB;AAEf,gBAAMuD,cAAc,GAAG5C,aAAW,CAAXA,iBAAAA,CACrBhB,iBAAiB,CADnB,IACEA,EADqBgB,CAAvB;;AAIA,gBAAM6C,mBAAmB,GAAG7C,aAAW,CAAXA,iBAAAA,CAAAA,MAAAA,EAA5B,cAA4BA,CAA5B;;AAIA,gBAAI8C,WAAW,GAAf,IAAA;;AACA,gBAAID,mBAAmB,KAAvB,IAAA,EAAkC;AAEhCC,cAAAA,WAAW,GAAXA,cAAAA;AAFF,aAAA,MAGO,IAAID,mBAAmB,KAAvB,cAAA,EAA4C;AAEjDC,cAAAA,WAAW,GAAXA,mBAAAA;AAEF;;AAAA,gBAAA,WAAA,EAAiB;AACf,kBAAM/C,OAAK,GAAA,4BAAA,EAAA,EAAA,WAAA,EAAA;AAETU,gBAAAA,SAAS,EAFA,eAAA;AAGTJ,gBAAAA,GAAG,EAAEtB,MAAM,CAANA,GAAAA,IAHP;AAAW,eAAA,CAAX;;AAKA,qBAAA,4BAAA,EAAA,EACKmD,oBAAAA,IAAAA,CAAAA,KAAAA,EADL,OACKA,CADL,EAAA;AAEE5B,gBAAAA,eAAe,EAAEvB,MAAM,CAANA,SAAAA,KAFnB;AAAA,eAAA,CAAA;AAKH;AACF;AACF;AAGD;;AAAA,UAAIA,MAAM,CAANA,IAAAA,KAAgBE,YAAY,CAAhC,UAAA,EAA6C;AAG3C,YAAIF,MAAM,CAANA,GAAAA,IAAciC,KAAK,CAALA,GAAAA,KAAcjC,MAAM,CAAtC,GAAA,EAA4C;AAC1C,iBAAA,KAAA;AAKF;;AAAA,YAAIiC,KAAK,CAALA,KAAAA,GAAJ,CAAA,EAAqB;AACnB,iBAAA,4BAAA,EAAA,EAAA,KAAA,EAAA;AAEEV,YAAAA,eAAe,EAAEvB,MAAM,CAANA,SAAAA,KAFnB,IAAA;AAGEwB,YAAAA,KAAK,EAHP,CAAA;AAIEC,YAAAA,MAAM,EAAE,CAACQ,KAAK,CAALA,MAAAA,CAJX,CAIWA,CAAD;AAJV,WAAA,CAAA;AAOF;;AAAA,eAAA,KAAA;AAIF;;AAAA,UAAIjC,MAAM,CAANA,IAAAA,KAAgBE,YAAY,CAAhC,OAAA,EAA0C;AACxC,YAAA,UAAA;;AAGA,YAAIF,MAAM,CAANA,GAAAA,KAAAA,SAAAA,IAA4BiC,KAAK,CAALA,MAAAA,CAAhC,MAAA,EAAqD;AACnD+B,UAAAA,UAAU,GAAG/B,KAAK,CAALA,MAAAA,CAAAA,MAAAA,GAAb+B,CAAAA;AADF,SAAA,MAEO;AACLA,UAAAA,UAAU,GAAG/B,KAAK,CAALA,MAAAA,CAAAA,SAAAA,CAAuB,UAAA,CAAA,EAAC;AAAA,mBAAIuB,CAAC,CAADA,GAAAA,KAAUxD,MAAM,CAApB,GAAA;AAArCgE,WAAa/B,CAAb+B;AAIF;;AAAA,YAAIA,UAAU,KAAK,CAAnB,CAAA,EAAuB;AACrB,cAAM/C,aAAW,GAAGX,YAAY,CAACN,MAAM,CAAvC,SAAgC,CAAhC;AACA,cAAImB,UAAU,GAAd,EAAA;;AACA,cAAA,aAAA,EAAiB;AACf,gBAAMC,aAAW,GACfpB,MAAM,CAANA,MAAAA,IACAC,iBAAiB,CAAjBA,IAAAA,CAAuB;AACrBoB,cAAAA,MAAM,EAAEoC,0BAA0B,CAACzD,MAAM,CAAP,SAAA,EAHtC,MAGsC;AADb,aAAvBC,CAFF;;AAKAkB,YAAAA,UAAU,GAAGF,aAAW,CAAXA,iBAAAA,CAAbE,aAAaF,CAAbE;AAEF;;AAAA,cAAMM,OAAM,GAAA,iCAAOQ,KAAK,CAAxB,MAAY,CAAZ;;AACAR,UAAAA,OAAM,CAANA,UAAM,CAANA,GAAAA,4BAAAA;AACEJ,YAAAA,MAAM,EAAEoC,0BAA0B,CAACzD,MAAM,CAAP,SAAA,EADpCyB,MACoC;AADpCA,WAAAA,EAAAA,UAAAA,EAAAA;AAIEC,YAAAA,SAAS,EAAE1B,MAAM,CAJnByB,SAAAA;AAKEH,YAAAA,GAAG,EAAEtB,MAAM,CAANA,MAAAA,IALPyB;AAAAA,WAAAA,CAAAA;AAOA,iBAAA,4BAAA,EAAA,EAAA,KAAA,EAAA;AAAmBA,YAAAA,MAAM,EAAzB;AAAA,WAAA,CAAA;AAEH;AAGD;;AAAA,UACEzB,MAAM,CAANA,IAAAA,KAAgBE,YAAY,CAA5BF,mBAAAA,KACCA,MAAM,CAANA,GAAAA,IAAAA,IAAAA,IAAsBA,MAAM,CAANA,GAAAA,KAAeiC,KAAK,CAD3CjC,GAAAA,KAEAA,MAAM,CAANA,UAAAA,KAAsBiC,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAAlBA,KAAAA,EAFtBjC,GAAAA,IAGAiC,KAAK,CAJP,eAAA,EAKE;AACA,eAAA,4BAAA,EAAA,EAAA,KAAA,EAAA;AAEEV,UAAAA,eAAe,EAFjB;AAAA,SAAA,CAAA;AAMF;;AAAA,UAAIvB,MAAM,CAANA,IAAAA,KAAgBC,iBAAiB,CAArC,UAAA,EAAkD;AAChD,YAAMqB,GAAG,GAAGtB,MAAM,CAAlB,GAAA;AACA,YAAMiE,SAAS,GAAGhC,KAAK,CAALA,MAAAA,CAAAA,IAAAA,CAAkB,UAAA,KAAA,EAAK;AAAA,iBAAIjB,KAAK,CAALA,GAAAA,KAAJ,GAAA;AAAzC,SAAkBiB,CAAlB;;AACA,YAAA,SAAA,EAAe;AACb,cAAMZ,MAAM,GAAA,4BAAA,EAAA,EACP4C,SAAS,CADF,MAAA,EAEPjE,MAAM,CAFX,MAAY,CAAZ;;AAIA,cAAMyB,QAAM,GAAA,iCAAOQ,KAAK,CAAxB,MAAY,CAAZ;;AACAR,UAAAA,QAAM,CAACQ,KAAK,CAALA,MAAAA,CAAAA,OAAAA,CAAPR,SAAOQ,CAAD,CAANR,GAAAA,4BAAAA,EAAAA,EAAAA,SAAAA,EAAAA;AAEEJ,YAAAA,MAAM,EAFRI;AAAAA,WAAAA,CAAAA;AAIA,iBAAA,4BAAA,EAAA,EAAA,KAAA,EAAA;AAEEA,YAAAA,MAAM,EAFR;AAAA,WAAA,CAAA;AAKH;AAED;;AAAA,UAAIzB,MAAM,CAANA,IAAAA,KAAgBE,YAAY,CAAhC,KAAA,EAAwC;AAEtC,YAAIF,MAAM,CAANA,GAAAA,IAAAA,IAAAA,IAAsBA,MAAM,CAANA,GAAAA,IAAciC,KAAK,CAA7C,GAAA,EAAmD;AAGjD,iBAAA,KAAA;AAEF;;AAAA,YAAMiC,eAAe,GAAGlE,MAAM,CAA9B,OAAA;AAEA,eAAA,4BAAA,EAAA,EAAA,KAAA,EAAA;AAEEyB,UAAAA,MAAM,EAAEyC,eAAe,CAAfA,GAAAA,CAAoB,UAAA,cAAA,EAAkB;AAC5C,gBAAMC,MAAM,GAAG7D,YAAY,CAAC8D,cAAc,CAA1C,SAA2B,CAA3B;AAEA,gBAAIjD,UAAU,GAAd,EAAA;;AAEA,gBAAA,MAAA,EAAY;AACV,kBAAMC,aAAW,GACfgD,cAAc,CAAdA,MAAAA,IACAnE,iBAAiB,CAAjBA,IAAAA,CAAuB;AACrBoB,gBAAAA,MAAM,EAAEoC,0BAA0B,CAChCW,cAAc,CADkB,SAAA,EAHtC,cAGsC;AADb,eAAvBnE,CAFF;;AASAkB,cAAAA,UAAU,GAAGgD,MAAM,CAANA,iBAAAA,CAAbhD,aAAagD,CAAbhD;AAGF;;AAAA,mBAAA,4BAAA;AACEE,cAAAA,MAAM,EAAEoC,0BAA0B,CAChCW,cAAc,CADkB,SAAA,EADpC,cACoC;AADpC,aAAA,EAAA,UAAA,EAAA;AAME1C,cAAAA,SAAS,EAAE0C,cAAc,CAN3B,SAAA;AAOE9C,cAAAA,GAAG,EAAE8C,cAAc,CAAdA,GAAAA,IAPP;AAAA,aAAA,CAAA;AApBJ,WAEUF,CAFV;AA8BE1C,UAAAA,KAAK,EAAExB,MAAM,CA9Bf;AAAA,SAAA,CAAA;AAkCF;;AAAA,UACEA,MAAM,CAANA,IAAAA,KAAgBC,iBAAiB,CAAjCD,IAAAA,IACAA,MAAM,CAANA,IAAAA,KAAgBE,YAAY,CAF9B,GAAA,EAGE;AAAA,YACQoB,IADR,GAC8BtB,MAD9B,CAAA,GAAA;AAAA,YACasC,CADb,GAC8BtC,MAD9B,CAAA,CAAA;AAAA,YACgBqE,SADhB,GAC8BrE,MAD9B,CAAA,SAAA;AAEA,YAAIsE,cAAc,GAAGrC,KAAK,CAA1B,KAAA;;AACA,YAAIjC,MAAM,CAANA,IAAAA,KAAgBE,YAAY,CAA5BF,GAAAA,IAAoCsC,CAAC,IAAzC,IAAA,EAAmD;AAGjDgC,UAAAA,cAAc,GAAGC,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAYtC,KAAK,CAALA,KAAAA,GAAAA,CAAAA,GAA7BqC,CAAiBC,CAAjBD;AAHF,SAAA,MAIO,IAAA,IAAA,EAAS;AACd,cAAME,SAAS,GAAGvC,KAAK,CAALA,MAAAA,CAAAA,IAAAA,CAAkB,UAAA,KAAA,EAAK;AAAA,mBAAIjB,KAAK,CAALA,GAAAA,KAAJ,IAAA;AAAzC,WAAkBiB,CAAlB;AACAqC,UAAAA,cAAc,GAAGrC,KAAK,CAALA,MAAAA,CAAAA,OAAAA,CAAjBqC,SAAiBrC,CAAjBqC;AAGF;;AAAA,YAAIA,cAAc,GAAlB,CAAA,EAAwB;AACtB,iBAAA,4BAAA,EAAA,EAAA,KAAA,EAAA;AAEE7C,YAAAA,MAAM,EAAEQ,KAAK,CAALA,MAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAFV,cAEUA,CAFV;AAGET,YAAAA,KAAK,EAAE8C,cAAc,GAHvB,CAAA;AAIE/C,YAAAA,eAAe,EAAE8C,SAAS,KAJ5B;AAAA,WAAA,CAAA;AAOH;AAKD;;AAAA,UAAMI,QAAQ,GAAGzE,MAAM,CAANA,GAAAA,GAAamD,oBAAAA,OAAAA,CAAAA,KAAAA,EAA0BnD,MAAM,CAA7CA,GAAamD,CAAbnD,GAAqD,CAAtE,CAAA;;AAIA,WAAA,IAAA,UAAA,GAAuBiC,KAAK,CAALA,MAAAA,CAAAA,KAAAA,GAAvB,OAAuBA,EAAvB,EAAA,SAAA,GAAA,KAAA,CAAA,OAAA,CAAA,UAAA,CAAA,EAAA,GAAA,GAAA,CAAA,EAAA,UAAA,GAAA,SAAA,GAAA,UAAA,GAAA,UAAA,CAAA,OAAA,MAAA,KAAA,UAAA,kCAAA,MAAA,CAAA,QAAA,kBAAA,YAAA,CAAA,EAAA,IAAuD;AAAA,YAAA,KAAA;;AAAA,YAAA,SAAA,EAAA;AAAA,cAAA,GAAA,IAAA,UAAA,CAAA,MAAA,EAAA;AAAA,UAAA,KAAA,GAAA,UAAA,CAAA,GAAA,EAAA,CAAA;AAAA,SAAA,MAAA;AAAA,UAAA,GAAA,GAAA,UAAA,CAAA,IAAA,EAAA;AAAA,cAAA,GAAA,CAAA,IAAA,EAAA;AAAA,UAAA,KAAA,GAAA,GAAA,CAAA,KAAA;AAA9CmB;;AAAAA,YAAAA,YAA8C,GAAA,KAA9CA;;AACP,YAAIA,YAAU,CAAVA,GAAAA,KAAmBpB,gBAAgB,CAAvC,GAAA,EAA6C;AAE3C;AAKF;;AAAA,YAAIyC,QAAQ,IAARA,CAAAA,IAAiBrB,YAAU,CAAVA,GAAAA,KAAmBpD,MAAM,CAA9C,GAAA,EAAoD;AAClD;AAEF;;AAAA,YAAIiB,aAAW,GAAGX,YAAY,CAAC8C,YAAU,CAAzC,SAA8B,CAA9B;;AACA,YAAA,aAAA,EAAiB;AACf,cAAMpC,OAAK,GAAGC,aAAW,CAAXA,iBAAAA,CAAAA,MAAAA,EAAd,YAAcA,CAAd;;AAEA,cAAID,OAAK,KAAT,IAAA,EAAoB;AAClB,mBAAA,KAAA;AADF,WAAA,MAEO,IAAIA,OAAK,IAAIA,OAAK,KAAlB,YAAA,EAAmC;AACxC,mBAAOmC,oBAAAA,SAAAA,CAAAA,KAAAA,EAELC,YAAU,CAFLD,GAAAA,EAAAA,OAAAA,EAMLnD,MAAM,CAANA,aAAAA,IAAwBA,MAAM,CAANA,IAAAA,CAAAA,QAAAA,CAN1B,QAM0BA,CANnBmD,CAAP;AASH;AACF;AAED;;AAAA,aAAA,KAAA;AA9cG,KAAA;AAidLuB,IAAAA,wBAjdK,EAAA,SAAA,wBAAA,CAAA,KAAA,EAid2B;AAC9B,UAAM1D,KAAK,GAAGiB,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAAhC,KAAcA,CAAd;AACA,aAAOL,wBAAwB,CAA/B,KAA+B,CAA/B;AAndG,KAAA;AAsdLC,IAAAA,yBAtdK,EAAA,SAAA,yBAAA,CAAA,IAAA,EAAA,MAAA,EAsdmC;AACtC,aAAOA,0BAAyB,CAAA,IAAA,EAAhC,MAAgC,CAAhC;AAvdG,KAAA;AA0dL8C,IAAAA,gBAAgB,EAAEC,iCAAkB,YAAlBA,EAEhBxE,WAAW,CA5df,wBA0doBwE;AA1db,GAAP;AA3GF,C","sourcesContent":["import * as NavigationActions from '../NavigationActions';\nimport * as StackActions from './StackActions';\nimport createConfigGetter from './createConfigGetter';\nimport getScreenForRouteName from './getScreenForRouteName';\nimport StateUtils from '../StateUtils';\nimport validateRouteConfigMap from './validateRouteConfigMap';\nimport invariant from '../utils/invariant';\nimport { generateKey } from './KeyGenerator';\nimport { createPathParser } from './pathUtils';\n\nfunction behavesLikePushAction(action) {\n  return (\n    action.type === NavigationActions.NAVIGATE ||\n    action.type === StackActions.PUSH\n  );\n}\n\nconst defaultActionCreators = () => ({});\n\nfunction isResetToRootStack(action) {\n  return action.type === StackActions.RESET && action.key === null;\n}\n\nexport default (routeConfigs, stackConfig = {}) => {\n  // Fail fast on invalid route definitions\n  validateRouteConfigMap(routeConfigs);\n\n  const childRouters = {};\n  const routeNames = Object.keys(routeConfigs);\n\n  // Loop through routes and find child routers\n  routeNames.forEach(routeName => {\n    // We're not using `getScreenForRouteName` here to preserve the lazy loading\n    // behaviour of routes. This means that routes with child routers must be\n    // defined using a component directly or with an object with a screen prop.\n    const routeConfig = routeConfigs[routeName];\n    const screen =\n      routeConfig && routeConfig.screen ? routeConfig.screen : routeConfig;\n    if (screen && screen.router) {\n      // If it has a router it's a navigator.\n      childRouters[routeName] = screen.router;\n    } else {\n      // If it doesn't have router it's an ordinary React component.\n      childRouters[routeName] = null;\n    }\n  });\n\n  const { initialRouteParams } = stackConfig;\n  const getCustomActionCreators =\n    stackConfig.getCustomActionCreators || defaultActionCreators;\n\n  const initialRouteName = stackConfig.initialRouteName || routeNames[0];\n\n  const initialChildRouter = childRouters[initialRouteName];\n\n  function getInitialState(action) {\n    let route = {};\n    const childRouter = childRouters[action.routeName];\n\n    // This is a push-like action, and childRouter will be a router or null if we are responsible for this routeName\n    if (behavesLikePushAction(action) && childRouter !== undefined) {\n      let childState = {};\n      // The router is null for normal leaf routes\n      if (childRouter !== null) {\n        const childAction =\n          action.action || NavigationActions.init({ params: action.params });\n        childState = childRouter.getStateForAction(childAction);\n      }\n\n      return {\n        key: 'StackRouterRoot',\n        isTransitioning: false,\n        index: 0,\n        routes: [\n          {\n            params: action.params,\n            ...childState,\n            key: action.key || generateKey(),\n            routeName: action.routeName,\n          },\n        ],\n      };\n    }\n\n    if (initialChildRouter) {\n      route = initialChildRouter.getStateForAction(\n        NavigationActions.navigate({\n          routeName: initialRouteName,\n          params: initialRouteParams,\n        })\n      );\n    }\n    const params = (routeConfigs[initialRouteName].params ||\n      route.params ||\n      action.params ||\n      initialRouteParams) && {\n      ...(routeConfigs[initialRouteName].params || {}),\n      ...(route.params || {}),\n      ...(action.params || {}),\n      ...(initialRouteParams || {}),\n    };\n    const { initialRouteKey } = stackConfig;\n    route = {\n      ...route,\n      ...(params ? { params } : {}),\n      routeName: initialRouteName,\n      key: action.key || (initialRouteKey || generateKey()),\n    };\n    return {\n      key: 'StackRouterRoot',\n      isTransitioning: false,\n      index: 0,\n      routes: [route],\n    };\n  }\n\n  function getParamsForRouteAndAction(routeName, action) {\n    let routeConfig = routeConfigs[routeName];\n    if (routeConfig && routeConfig.params) {\n      return { ...routeConfig.params, ...action.params };\n    } else {\n      return action.params;\n    }\n  }\n\n  const {\n    getPathAndParamsForRoute,\n    getActionForPathAndParams,\n  } = createPathParser(childRouters, routeConfigs, stackConfig);\n\n  return {\n    childRouters,\n\n    getComponentForState(state) {\n      const activeChildRoute = state.routes[state.index];\n      const { routeName } = activeChildRoute;\n      if (childRouters[routeName]) {\n        return childRouters[routeName].getComponentForState(activeChildRoute);\n      }\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getActionCreators(route, navStateKey) {\n      return {\n        ...getCustomActionCreators(route, navStateKey),\n        pop: (n, params) =>\n          StackActions.pop({\n            n,\n            ...params,\n          }),\n        popToTop: params => StackActions.popToTop(params),\n        push: (routeName, params, action) =>\n          StackActions.push({\n            routeName,\n            params,\n            action,\n          }),\n        replace: (replaceWith, params, action, newKey) => {\n          if (typeof replaceWith === 'string') {\n            return StackActions.replace({\n              routeName: replaceWith,\n              params,\n              action,\n              key: route.key,\n              newKey,\n            });\n          }\n          invariant(\n            typeof replaceWith === 'object',\n            'Must replaceWith an object or a string'\n          );\n          invariant(\n            params == null,\n            'Params must not be provided to .replace() when specifying an object'\n          );\n          invariant(\n            action == null,\n            'Child action must not be provided to .replace() when specifying an object'\n          );\n          invariant(\n            newKey == null,\n            'Child action must not be provided to .replace() when specifying an object'\n          );\n          return StackActions.replace(replaceWith);\n        },\n        reset: (actions, index) =>\n          StackActions.reset({\n            actions,\n            index: index == null ? actions.length - 1 : index,\n            key: navStateKey,\n          }),\n        dismiss: () =>\n          NavigationActions.back({\n            key: navStateKey,\n          }),\n      };\n    },\n\n    getStateForAction(action, state) {\n      // Set up the initial state if needed\n      if (!state) {\n        return getInitialState(action);\n      }\n\n      const activeChildRoute = state.routes[state.index];\n\n      if (\n        !isResetToRootStack(action) &&\n        action.type !== NavigationActions.NAVIGATE\n      ) {\n        // Let the active child router handle the action\n        const activeChildRouter = childRouters[activeChildRoute.routeName];\n        if (activeChildRouter) {\n          const route = activeChildRouter.getStateForAction(\n            action,\n            activeChildRoute\n          );\n          if (route !== null && route !== activeChildRoute) {\n            return StateUtils.replaceAt(\n              state,\n              activeChildRoute.key,\n              route,\n              // the following tells replaceAt to NOT change the index to this route for the setParam action, because people don't expect param-setting actions to switch the active route\n              action.type === NavigationActions.SET_PARAMS\n            );\n          }\n        }\n      } else if (action.type === NavigationActions.NAVIGATE) {\n        // Traverse routes from the top of the stack to the bottom, so the\n        // active route has the first opportunity, then the one before it, etc.\n\n        for (let childRoute of state.routes.slice().reverse()) {\n          let childRouter = childRouters[childRoute.routeName];\n          let childAction =\n            action.routeName === childRoute.routeName && action.action\n              ? action.action\n              : action;\n\n          if (childRouter) {\n            const nextRouteState = childRouter.getStateForAction(\n              childAction,\n              childRoute\n            );\n\n            if (nextRouteState === null || nextRouteState !== childRoute) {\n              const newState = StateUtils.replaceAndPrune(\n                state,\n                nextRouteState ? nextRouteState.key : childRoute.key,\n                nextRouteState ? nextRouteState : childRoute\n              );\n              return {\n                ...newState,\n                isTransitioning:\n                  state.index !== newState.index\n                    ? action.immediate !== true\n                    : state.isTransitioning,\n              };\n            }\n          }\n        }\n      }\n\n      // Handle push and navigate actions. This must happen after the focused\n      // child router has had a chance to handle the action.\n      if (\n        behavesLikePushAction(action) &&\n        childRouters[action.routeName] !== undefined // undefined means it's not a childRouter or a screen\n      ) {\n        const childRouter = childRouters[action.routeName];\n        let route;\n\n        invariant(\n          action.type !== StackActions.PUSH || action.key == null,\n          'StackRouter does not support key on the push action'\n        );\n\n        // Before pushing a new route we first try to find one in the existing route stack\n        // More information on this: https://github.com/react-navigation/rfcs/blob/master/text/0004-less-pushy-navigate.md\n        const lastRouteIndex = state.routes.findIndex(r => {\n          if (action.key) {\n            return r.key === action.key;\n          } else {\n            return r.routeName === action.routeName;\n          }\n        });\n\n        // An instance of this route exists already and we're dealing with a navigate action\n        if (action.type !== StackActions.PUSH && lastRouteIndex !== -1) {\n          // If index is unchanged and params are not being set, leave state identity intact\n          if (state.index === lastRouteIndex && !action.params) {\n            return null;\n          }\n\n          // Remove the now unused routes at the tail of the routes array\n          const routes = state.routes.slice(0, lastRouteIndex + 1);\n\n          // Apply params if provided, otherwise leave route identity intact\n          if (action.params) {\n            const route = state.routes[lastRouteIndex];\n            routes[lastRouteIndex] = {\n              ...route,\n              params: {\n                ...route.params,\n                ...action.params,\n              },\n            };\n          }\n          // Return state with new index. Change isTransitioning only if index has changed\n          return {\n            ...state,\n            isTransitioning:\n              state.index !== lastRouteIndex\n                ? action.immediate !== true\n                : state.isTransitioning,\n            index: lastRouteIndex,\n            routes,\n          };\n        }\n\n        if (childRouter) {\n          // Delegate to the child router with the given action, or init it\n          const childAction =\n            action.action ||\n            NavigationActions.init({\n              params: getParamsForRouteAndAction(action.routeName, action),\n            });\n          route = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            // note(brentvatne): does it make sense to wipe out the params\n            // here? or even to add params at all? need more info about what\n            // this solves\n            ...childRouter.getStateForAction(childAction),\n            routeName: action.routeName,\n            key: action.key || generateKey(),\n          };\n        } else {\n          // Create the route from scratch\n          route = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            routeName: action.routeName,\n            key: action.key || generateKey(),\n          };\n        }\n        return {\n          ...StateUtils.push(state, route),\n          isTransitioning: action.immediate !== true,\n        };\n      } else if (\n        action.type === StackActions.PUSH &&\n        childRouters[action.routeName] === undefined\n      ) {\n        // Return the state identity to bubble the action up\n        return state;\n      }\n\n      // Handle navigation to other child routers that are not yet pushed\n      if (behavesLikePushAction(action)) {\n        const childRouterNames = Object.keys(childRouters);\n        for (let i = 0; i < childRouterNames.length; i++) {\n          const childRouterName = childRouterNames[i];\n          const childRouter = childRouters[childRouterName];\n          if (childRouter) {\n            // For each child router, start with a blank state\n            const initChildRoute = childRouter.getStateForAction(\n              NavigationActions.init()\n            );\n            // Then check to see if the router handles our navigate action\n            const navigatedChildRoute = childRouter.getStateForAction(\n              action,\n              initChildRoute\n            );\n            let routeToPush = null;\n            if (navigatedChildRoute === null) {\n              // Push the route if the router has 'handled' the action and returned null\n              routeToPush = initChildRoute;\n            } else if (navigatedChildRoute !== initChildRoute) {\n              // Push the route if the state has changed in response to this navigation\n              routeToPush = navigatedChildRoute;\n            }\n            if (routeToPush) {\n              const route = {\n                ...routeToPush,\n                routeName: childRouterName,\n                key: action.key || generateKey(),\n              };\n              return {\n                ...StateUtils.push(state, route),\n                isTransitioning: action.immediate !== true,\n              };\n            }\n          }\n        }\n      }\n\n      // Handle pop-to-top behavior. Make sure this happens after children have had a chance to handle the action, so that the inner stack pops to top first.\n      if (action.type === StackActions.POP_TO_TOP) {\n        // Refuse to handle pop to top if a key is given that doesn't correspond\n        // to this router\n        if (action.key && state.key !== action.key) {\n          return state;\n        }\n\n        // If we're already at the top, then we return the state with a new\n        // identity so that the action is handled by this router.\n        if (state.index > 0) {\n          return {\n            ...state,\n            isTransitioning: action.immediate !== true,\n            index: 0,\n            routes: [state.routes[0]],\n          };\n        }\n        return state;\n      }\n\n      // Handle replace action\n      if (action.type === StackActions.REPLACE) {\n        let routeIndex;\n\n        // If the key param is undefined, set the index to the last route in the stack\n        if (action.key === undefined && state.routes.length) {\n          routeIndex = state.routes.length - 1;\n        } else {\n          routeIndex = state.routes.findIndex(r => r.key === action.key);\n        }\n\n        // Only replace if the key matches one of our routes\n        if (routeIndex !== -1) {\n          const childRouter = childRouters[action.routeName];\n          let childState = {};\n          if (childRouter) {\n            const childAction =\n              action.action ||\n              NavigationActions.init({\n                params: getParamsForRouteAndAction(action.routeName, action),\n              });\n            childState = childRouter.getStateForAction(childAction);\n          }\n          const routes = [...state.routes];\n          routes[routeIndex] = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            // merge the child state in this order to allow params override\n            ...childState,\n            routeName: action.routeName,\n            key: action.newKey || generateKey(),\n          };\n          return { ...state, routes };\n        }\n      }\n\n      // Update transitioning state\n      if (\n        action.type === StackActions.COMPLETE_TRANSITION &&\n        (action.key == null || action.key === state.key) &&\n        action.toChildKey === state.routes[state.index].key &&\n        state.isTransitioning\n      ) {\n        return {\n          ...state,\n          isTransitioning: false,\n        };\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        const key = action.key;\n        const lastRoute = state.routes.find(route => route.key === key);\n        if (lastRoute) {\n          const params = {\n            ...lastRoute.params,\n            ...action.params,\n          };\n          const routes = [...state.routes];\n          routes[state.routes.indexOf(lastRoute)] = {\n            ...lastRoute,\n            params,\n          };\n          return {\n            ...state,\n            routes,\n          };\n        }\n      }\n\n      if (action.type === StackActions.RESET) {\n        // Only handle reset actions that are unspecified or match this state key\n        if (action.key != null && action.key != state.key) {\n          // Deliberately use != instead of !== so we can match null with\n          // undefined on either the state or the action\n          return state;\n        }\n        const newStackActions = action.actions;\n\n        return {\n          ...state,\n          routes: newStackActions.map(newStackAction => {\n            const router = childRouters[newStackAction.routeName];\n\n            let childState = {};\n\n            if (router) {\n              const childAction =\n                newStackAction.action ||\n                NavigationActions.init({\n                  params: getParamsForRouteAndAction(\n                    newStackAction.routeName,\n                    newStackAction\n                  ),\n                });\n\n              childState = router.getStateForAction(childAction);\n            }\n\n            return {\n              params: getParamsForRouteAndAction(\n                newStackAction.routeName,\n                newStackAction\n              ),\n              ...childState,\n              routeName: newStackAction.routeName,\n              key: newStackAction.key || generateKey(),\n            };\n          }),\n          index: action.index,\n        };\n      }\n\n      if (\n        action.type === NavigationActions.BACK ||\n        action.type === StackActions.POP\n      ) {\n        const { key, n, immediate } = action;\n        let backRouteIndex = state.index;\n        if (action.type === StackActions.POP && n != null) {\n          // determine the index to go back *from*. In this case, n=1 means to go\n          // back from state.index, as if it were a normal \"BACK\" action\n          backRouteIndex = Math.max(1, state.index - n + 1);\n        } else if (key) {\n          const backRoute = state.routes.find(route => route.key === key);\n          backRouteIndex = state.routes.indexOf(backRoute);\n        }\n\n        if (backRouteIndex > 0) {\n          return {\n            ...state,\n            routes: state.routes.slice(0, backRouteIndex),\n            index: backRouteIndex - 1,\n            isTransitioning: immediate !== true,\n          };\n        }\n      }\n\n      // By this point in the router's state handling logic, we have handled the behavior of the active route, and handled any stack actions.\n      // If we haven't returned by now, we should allow non-active child routers to handle this action, and switch to that index if the child state (route) does change..\n\n      const keyIndex = action.key ? StateUtils.indexOf(state, action.key) : -1;\n\n      // Traverse routes from the top of the stack to the bottom, so the\n      // active route has the first opportunity, then the one before it, etc.\n      for (let childRoute of state.routes.slice().reverse()) {\n        if (childRoute.key === activeChildRoute.key) {\n          // skip over the active child because we let it attempt to handle the action earlier\n          continue;\n        }\n        // If a key is provided and in routes state then let's use that\n        // knowledge to skip extra getStateForAction calls on other child\n        // routers\n        if (keyIndex >= 0 && childRoute.key !== action.key) {\n          continue;\n        }\n        let childRouter = childRouters[childRoute.routeName];\n        if (childRouter) {\n          const route = childRouter.getStateForAction(action, childRoute);\n\n          if (route === null) {\n            return state;\n          } else if (route && route !== childRoute) {\n            return StateUtils.replaceAt(\n              state,\n              childRoute.key,\n              route,\n              // People don't expect these actions to switch the active route\n              // TODO: We should switch to action.preserveFocus: true for drawer in future\n              action.preserveFocus || action.type.includes('DRAWER')\n            );\n          }\n        }\n      }\n\n      return state;\n    },\n\n    getPathAndParamsForState(state) {\n      const route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n\n    getActionForPathAndParams(path, params) {\n      return getActionForPathAndParams(path, params);\n    },\n\n    getScreenOptions: createConfigGetter(\n      routeConfigs,\n      stackConfig.defaultNavigationOptions\n    ),\n  };\n};\n"]},"metadata":{},"sourceType":"script"}